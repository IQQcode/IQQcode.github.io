(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{435:function(s,n,t){"use strict";t.r(n);var a=t(3),r=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-asynctask简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-asynctask简介"}},[s._v("#")]),s._v(" 1. Asynctask简介")]),s._v(" "),n("p",[s._v("除了使用Handler"),n("strong",[s._v("实现线程间通信")]),s._v("外，Android提供了一个工具类：AsyncTask，它使创建需要与用户界面交互的长时间运\n行的任务变得更简单。"),n("strong",[s._v("在没有AsyncTask之前，使用Handler + Thread实现异步任务")]),s._v("。相对来说AsyncTask更轻量级一些，适用于简单的异步处理，AsyncTask是对Handler和Thread的封装，封装了ThreadPool，效率更高。")]),s._v(" "),n("h3",{attrs:{id:"相关api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关api"}},[s._v("#")]),s._v(" 相关API")]),s._v(" "),n("p",[s._v("AsyncTask是抽象类。AsyncTask定义了三种泛型类型"),n("code",[s._v("Params")]),s._v("，"),n("code",[s._v("Progress")]),s._v("和 "),n("code",[s._v("Result")])]),s._v(" "),n("ol",[n("li",[s._v("Params启动任务执行的输入参数，比如，HTTP请求的URL")]),s._v(" "),n("li",[s._v("Progress后台任务执行的百分比")]),s._v(" "),n("li",[s._v("Result后台执行任务最终返回的结果，比如String")])]),s._v(" "),n("p",[n("strong",[s._v("execute(Params...params)")])]),s._v(" "),n("ul",[n("li",[s._v("启动任务，开始任务的执行流程")])]),s._v(" "),n("p",[n("strong",[s._v("void onPreExecute()")])]),s._v(" "),n("ul",[n("li",[s._v("在分线程工作开始之前在 "),n("font",{attrs:{color:"red"}},[s._v("UIThread")]),s._v(" 中执行，一般用来显示提示视图")],1)]),s._v(" "),n("p",[n("strong",[s._v("Result dolnBackground(Params... params)")])]),s._v(" "),n("ul",[n("li",[s._v("在 "),n("font",{attrs:{color:"red"}},[s._v("workerThread")]),s._v(" 中执行，完成任务的主要工作，通常需要较长的时间")],1)]),s._v(" "),n("p",[n("strong",[s._v("void onPostExecute(Result result)")])]),s._v(" "),n("ul",[n("li",[s._v("在dolnBackground()执行完后在 "),n("font",{attrs:{color:"red"}},[s._v("UIThread")]),s._v(" 中执行，一般用来更新界面")],1)]),s._v(" "),n("p",[n("strong",[s._v("publishProgress(Progress...values)")]),s._v("：在分线程中，发布当前进度")]),s._v(" "),n("p",[n("strong",[s._v("void onProgressUpdate(Progress...values)")]),s._v("：在主线程中更新进度")]),s._v(" "),n("div",{staticClass:"language-kotlin line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-kotlin"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// MyAsyncTask(this).execute()")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" MyAsyncTask "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" AsyncTask"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Int"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" String"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行任务之前触发的事件方法，可以在该方法中作一些初始化工作")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("onPreExecute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("onPreExecute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 类似于在线程中执行任务，不能访问UI组件\n     * @param params Array<out String?>\n     * @return String?\n     */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("doInBackground")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("vararg")]),s._v(" params"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" String"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("publishProgress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进度变化，onProgressUpdate会更新")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 更新进度值\n     * @param values Array<out Int?>\n     */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("onProgressUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("vararg")]),s._v(" values"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Int"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("onProgressUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("AsyncTask 的泛型类型\n异步任务使用的三种类型如下：\nParams ，执行时发送到任务的参数类型。\nProgress ，后台计算期间发布的进度单元的类型。\nResult ，后台计算Result的类型。\n并非所有类型总是由异步任务使用。 要将类型标记为未使用，只需使用类型Void ：\nprivate class MyTask extends AsyncTask<Void, Void, Void> { ... }")]),s._v(" "),n("p",[s._v("4个步骤\n当一个异步任务被执行时，任务会经过 4 个步骤：\nonPreExecute() ，在执行任务之前在 UI 线程上调用。 此步骤通常用于设置任务，例如通过在用户界面中显示进度条。\ndoInBackground ，在onPreExecute()完成执行后立即在后台线程上调用。 此步骤用于执行可能需要很长时间的后台计算。 异步任务的参数传递到这一步。 计算的结果必须由这一步返回，并将传递回最后一步。 这一步也可以使用publishProgress来发布一个或多个进度单元。 这些值发布在 UI 线程上的onProgressUpdate步骤中。\nonProgressUpdate ，在调用publishProgress后在 UI 线程上调用。 执行的时间是不确定的。 此方法用于在后台计算仍在执行时在用户界面中显示任何形式的进度。 例如，它可用于动画进度条或在文本字段中显示日志。\nonPostExecute ，在后台计算完成后在 UI 线程上调用。 后台计算的结果作为参数传递给这一步。\n取消任务\n可以通过调用cancel(boolean)任务。 调用此方法将导致后续调用isCancelled()返回 true。 调用此方法后， onCancelled(Object) ，而不是onPostExecute(Object)之后将被调用doInBackground(Object[])的回报。 为了确保尽快取消任务，您应该始终定期从doInBackground(Object[])定期检查isCancelled()的返回值，如果可能的话（例如在循环中。）\n线程规则\n要使此类正常工作，必须遵循一些线程规则：\nAsyncTask 类必须在 UI 线程上加载。 这是从Build.VERSION_CODES.JELLY_BEAN自动完成的。\n任务实例必须在 UI 线程上创建。\nexecute必须在 UI 线程上调用。\n不要手动调用onPreExecute() 、 onPostExecute 、 doInBackground 、 onProgressUpdate 。\n任务只能执行一次（如果尝试第二次执行，将抛出异常。）\n内存可观察性\nAsyncTask 保证所有回调调用都是同步的，以确保以下没有显式同步。\nonPreExecute的内存影响，以及在调用execute之前执行的任何其他操作，包括 AsyncTask 对象的构造，对doInBackground都是可见的。\n的记忆效应doInBackground是可见的onPostExecute 。\n的任何记忆效应doInBackground到呼叫前publishProgress是到对应的可见onProgressUpdate呼叫。 （但doInBackground继续运行，需要注意doInBackground中的后续更新不会干扰正在进行的onProgressUpdate调用。）\n呼叫前述任记忆效应cancel到呼叫后是可见的isCancelled ，则返回true，结果，或期间和所得到的呼叫后onCancelled 。\n执行顺序\n首次引入时，AsyncTasks 在单个后台线程上串行执行。 从Build.VERSION_CODES.DONUT开始，这被更改为允许多个任务并行操作的线程池。 从Build.VERSION_CODES.HONEYCOMB开始，任务在单个线程上执行，以避免并行执行导致的常见应用程序错误。\n如果你真的想要并行执行，你可以用THREAD_POOL_EXECUTOR调用executeOnExecutor(Executor, Object[]) 。\n已弃用\n请改用标准的java.util.concurrent或Kotlin 并发实用程序 。")])])}),[],!1,null,null,null);n.default=r.exports}}]);