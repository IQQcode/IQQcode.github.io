(window.webpackJsonp=window.webpackJsonp||[]).push([[383],{705:function(s,t,a){"use strict";a.r(t);var n=a(3),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418183123.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_1-希尔排序思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-希尔排序思想"}},[s._v("#")]),s._v(" 1. 希尔排序思想")]),s._v(" "),t("p",[s._v("希尔排序(Shell Sort)是插入排序的一种，是"),t("strong",[s._v("直接插入排序")]),s._v("算法的一种更高效的改进版本。具体高效在何处呢？")]),s._v(" "),t("p",[s._v("前面俺讲插入排序的时候，我们会发现一个很费劲的事儿，如果已排序的分组元素为"),t("code",[s._v("[2,5,6,7,8,9]")]),s._v("，未排序的分组元素为"),t("code",[s._v("[1]")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418200834.png",alt:""}})]),s._v(" "),t("p",[s._v("我们需要拿着"),t("code",[s._v("1")]),s._v("从后往前，依次和"),t("code",[s._v("2,5,6,7,8,9")]),s._v("进行交换位置，才能完成真正的插入，每次交换只能和相邻的元素交换位置，这样比实在是效率低下。但是，在插入排序时俺说了"),t("strong",[s._v("折半插入")]),s._v("，这算是一种优化，但是如果我要是将"),t("code",[s._v("1")]),s._v("插入到"),t("code",[s._v("2,5,1,7,8,9")]),s._v("当中，是不是就不行啦？")]),s._v(" "),t("p",[s._v("那我可不可以这样做呢？")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418202300.png",alt:""}})]),s._v(" "),t("p",[s._v("把"),t("code",[s._v("1")]),s._v("放到更前面的位置，比如一次交换就能把"),t("code",[s._v("1")]),s._v("插到"),t("code",[s._v("6")]),s._v("和"),t("code",[s._v("7")]),s._v("之间，这样一次交换1就向前走了3个位置，可以减少交换的次数，然后再通过一次交换，直接结束排序。这样的需求如何实现呢？接下来我们来看看"),t("strong",[s._v("希尔排序")]),s._v("的原理。")]),s._v(" "),t("h3",{attrs:{id:"_2-希尔排序详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-希尔排序详解"}},[s._v("#")]),s._v(" 2. 希尔排序详解")]),s._v(" "),t("p",[t("strong",[s._v("排序原理：")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("选定一个增长量"),t("code",[s._v("ans")]),s._v("，按照增长量"),t("code",[s._v("ans")]),s._v("作为数据分组的依据，对数据进行分组；")])]),s._v(" "),t("li",[t("p",[s._v("对分好组的每一组数据完成"),t("strong",[s._v("插入排序")]),s._v("（每个子组的排序使用的是插入排序）；")])]),s._v(" "),t("li",[t("p",[s._v("减小增长量，最小减为1，重复第二步操作")])])]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("增长量ans：")]),s._v(" 我们这里采用以下规则")]),s._v(" "),t("p",[s._v("​    "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418203555.png"}})]),s._v(" "),t("p",[t("strong",[s._v("【第一趟排序】")])]),s._v(" "),t("p",[s._v("初始增量为"),t("code",[s._v("ans = length/2 = 4")]),s._v("，即将整个数组划分为4个子组，分别为"),t("code",[s._v("4,6")]),s._v("，"),t("code",[s._v("8,2")]),s._v("，"),t("code",[s._v("9,6")]),s._v("，"),t("code",[s._v("7,1")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200722224144.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418185830.png",alt:""}})]),s._v(" "),t("p",[s._v("将每个子组独立的看为一个要排序的数组，然后分别进行直接排序。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418185852.png",alt:""}})]),s._v(" "),t("p",[s._v("可以看到，每个子序列现在已经有序了。但是将每个子序列回归放到整个数组中，发现整个数组还是乱序的。我们接着进行第二趟排序。")]),s._v(" "),t("p",[t("strong",[s._v("【第二趟排序】")])]),s._v(" "),t("p",[s._v("二次增量为"),t("code",[s._v("ans = 4/2 = 2")]),s._v("，即将整个数组划分为4个子组，分别为"),t("code",[s._v("4,6,6,9")]),s._v("，"),t("code",[s._v("2,1,8,7")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200722224510.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418195035.png",alt:""}})]),s._v(" "),t("p",[s._v("然后在分别对两个子组进行插入排序")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418192053.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("【第三趟排序】")])]),s._v(" "),t("p",[s._v("第三次增量为"),t("code",[s._v("ans = 2/2 = 1")]),s._v("，即将每个元素看成一组，子序列合并为一组，"),t("code",[s._v("4,1,6,2,6,7,9,8")]),s._v("。")]),s._v(" "),t("p",[s._v("其实，这就是相当于"),t("strong",[s._v("直接插入排序")]),s._v("。")]),s._v(" "),t("p",[s._v("但是，经过第一趟、第二趟的处理之后，此时第三趟要排序的数组对比于原数组，我们发现它其实是被"),t("strong",[s._v("粗略调整")]),s._v("过了，"),t("strong",[s._v("数组中的逆序对个数明显减少")]),s._v("，数组在一定程度上变得相对有序了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418192910.png",alt:""}})]),s._v(" "),t("p",[s._v("此时，仅仅需要对以上数列简单微调，无需大量移动操作即可完成整个数组的排序。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418192926.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现"}},[s._v("#")]),s._v(" 3. 代码实现")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shellSort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//根据数组长度，确定增长量ans")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3,7,15...")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 减小ans的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//找到待插入的元素")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//第一个待插入元素的索引为ans，该子组中ans之前的元素已有序")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//待插入的元素插入到分组的有序序列中")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将待排序元素arr[j]倒序依次与有序序列中元素比较，放入有序序列中合适位置")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" temp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 有序则不做处理(等同于break)，此处不加else也可以")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("h3",{attrs:{id:"_4-复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析"}},[s._v("#")]),s._v(" 4. 复杂度分析")]),s._v(" "),t("p",[s._v("希尔排序，利用分组粗调的方式减少了直接插入排序的工作量，使得算法的平均时间复杂度低于0(n^2^)")]),s._v(" "),t("p",[t("strong",[s._v("【时间复杂度】O(nlogn)")])]),s._v(" "),t("p",[t("strong",[s._v("【空间复杂度】O(1)")])]),s._v(" "),t("h3",{attrs:{id:"_5-希尔排序与插入排序比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-希尔排序与插入排序比较"}},[s._v("#")]),s._v(" 5. 希尔排序与插入排序比较")]),s._v(" "),t("p",[s._v("我们可以使用事后分析法对希尔排序和插入排序做性能比较。")]),s._v(" "),t("p",[s._v("测试从"),t("code",[s._v("100000 ~ 1")]),s._v("的逆向数据数组，我们可以根据执行时间来完成测试。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img/20200418205606.png",alt:""}})]),s._v(" "),t("p",[s._v("【执行时间】")]),s._v(" "),t("ul",[t("li",[s._v("希尔排序：29ms")]),s._v(" "),t("li",[s._v("直接插入排序：76826ms")]),s._v(" "),t("li",[s._v("折半插入排序：13075ms")])]),s._v(" "),t("p",[s._v("可以看出，希尔排序的效率相比其他两种效率很高。这就是得益于每趟对数组进行的"),t("strong",[s._v("粗略调整，有效的减少了数列中逆序对的个数")])])])}),[],!1,null,null,null);t.default=r.exports}}]);