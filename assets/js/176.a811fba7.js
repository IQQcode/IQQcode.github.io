(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{505:function(t,s,a){"use strict";a.r(s);var e=a(3),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("线程池：4大方法、7大参数、4种拒绝策略")])]),t._v(" "),s("h2",{attrs:{id:"_1-线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程池"}},[t._v("#")]),t._v(" 1. 线程池")]),t._v(" "),s("p",[t._v("创建线程的方式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("继承 "),s("strong",[t._v("Thread")]),t._v(" "),s("code",[t._v("run()")])])]),t._v(" "),s("li",[s("p",[t._v("实现 "),s("strong",[t._v("Runnable")]),t._v(" "),s("code",[t._v("run()")])])]),t._v(" "),s("li",[s("p",[t._v("实现 "),s("strong",[t._v("Callable")]),t._v(" "),s("code",[t._v("call()")])])]),t._v(" "),s("li",[s("p",[t._v("线程池（推荐使用线程池来创建线程）")])])]),t._v(" "),s("h3",{attrs:{id:"线程池概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池概述"}},[t._v("#")]),t._v(" 线程池概述")]),t._v(" "),s("p",[t._v("程序启动一个新的线程的成本是比较高的，因为它要与操作系统来交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量"),s("font",{attrs:{color:"green"}},[s("strong",[t._v("生命周期很短的线程时")])]),t._v("，更应该考虑使用"),s("strong",[t._v("线程池")]),t._v("。")],1),t._v(" "),s("p",[s("strong",[t._v("线程池里的每一个线程在调用结束后，并不会死亡，而是再次回到线程池中成为空闲状态，再次等待调度")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JDK5之前，线程池必须手动来创建；")])]),t._v(" "),s("li",[s("p",[t._v("JDK5之后，Java内置线程池来直接使用")])])]),t._v(" "),s("h3",{attrs:{id:"线程池的优点-结合内核"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池的优点-结合内核"}},[t._v("#")]),t._v(" 线程池的优点(结合内核)")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("降低资源消耗：")]),t._v(" 通过重复利用已创建的线程，降低线程创建和销毁带来的开销")]),t._v(" "),s("li",[s("strong",[t._v("提高响应速度：")]),t._v(" 当任务到达时，任务可以不需要等待线程的创建能立即执行（线程池中存在已经创建好的线程来直接使用）")]),t._v(" "),s("li",[s("strong",[t._v("提高线程的可管理性：")]),t._v(" 使用线程池可以统一进行线程分配、调度和监控")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"【os调度执行线程】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【os调度执行线程】"}},[t._v("#")]),t._v(" 【OS调度执行线程】")]),t._v(" "),s("p",[s("strong",[t._v("【线程模型分类】")])]),t._v(" "),s("ul",[s("li",[t._v("[x] "),s("strong",[t._v("用户级线程[User-Level-Thread]-UTL")])])]),t._v(" "),s("p",[t._v("应用程序实现，不依赖操作系统核心。负责创建、同步、调度和管理线程。不需要"),s("strong",[t._v("用户态 / 核心态")]),t._v("切换，速度快。"),s("font",{attrs:{color:"red"}},[t._v("内核对ULT无感知")]),t._v("，线程阻塞则进程阻塞")],1),t._v(" "),s("ul",[s("li",[t._v("[x] "),s("strong",[t._v("内核级线程[Kernel-Level Thread]-KLT")])])]),t._v(" "),s("p",[t._v("内核保存线程的状态和上下文信息，线程阻塞进程-不会阻塞。负责多线程在CPU上的并发处理，需要进行上下文切换")]),t._v(" "),s("p",[s("font",{attrs:{color:"blue"}},[s("strong",[t._v("用户线程只能依托于内核级线程来调度CPU资源")])])],1),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("为什么要隔离")])]),t._v(" "),s("ul",[s("li",[t._v("提高稳定性，用户线程崩了，内核线程不会受影响；")]),t._v(" "),s("li",[t._v("提高安全性，防止用户线程有病毒或攻击")])]),t._v(" "),s("h3",{attrs:{id:"java的线程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java的线程模型"}},[t._v("#")]),t._v(" Java的线程模型")]),t._v(" "),s("p",[s("strong",[t._v("语言-采用的是内核级线程")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213406.png",alt:"image-20201026093153371"}})]),t._v(" "),s("h3",{attrs:{id:"java到系统内核线程映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java到系统内核线程映射"}},[t._v("#")]),t._v(" Java到系统内核线程映射")]),t._v(" "),s("p",[t._v("JVM调用系统库，通过系统调度器在内核空间创建内核线程。内核线程与Java线程是"),s("strong",[t._v("1 : 1")]),t._v(" 的映射关系")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213410.png",alt:"image-20201026094047212"}})]),t._v(" "),s("p",[s("strong",[t._v("线程上下文切换：")])]),t._v(" "),s("p",[t._v("用户线程寄存器中的上下文环境（当前执行到的指令，程序计数器，中间数据）均保存在内核空间的"),s("strong",[t._v("TSS任务状态段")]),t._v("中")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213414.png",alt:"image-20201026094006802"}})]),t._v(" "),s("br"),t._v(" "),s("hr"),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"【线程池工作原理】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【线程池工作原理】"}},[t._v("#")]),t._v(" 【线程池工作原理】")]),t._v(" "),s("ol",[s("li",[t._v("当前线程数小于"),s("code",[t._v("corePoolSize")]),t._v("，创建线程")]),t._v(" "),s("li",[t._v("当前线程数大于等于"),s("code",[t._v("corePoolSize")]),t._v("，且"),s("strong",[t._v("阻塞队列")]),t._v("未满，将任务放入阻塞队列")]),t._v(" "),s("li",[t._v("当线程数大于等于"),s("code",[t._v("corePoolSize")]),t._v("，且阻塞队列已满时：\n"),s("ul",[s("li",[t._v("若线程数小于"),s("code",[t._v("maxPoolSize")]),t._v("，创建l"),s("strong",[t._v("临时线程")]),t._v("执行任务")]),t._v(" "),s("li",[t._v("若线程数等于"),s("code",[t._v("maxPoolSize")]),t._v("，抛出异常，拒绝任务")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213418.png",alt:"image-20201008221945968"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213423.png",alt:"image-20201026104058532"}})]),t._v(" "),s("p",[s("font",{attrs:{color:"#70a1ff"}},[s("strong",[t._v("懒加载策略")])]),t._v("：创建完线程池之后，默认情况下，线程池中并没有任何线程，等到有任务来才创建线程去执行任务")],1),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("预热：线程池一旦创建就会立即创建线程。")]),t._v(" 调用 "),s("code",[t._v("prestartAllCoreThreads()")]),t._v(" 或者 "),s("code",[t._v("prestartCoreThread()")]),t._v(" 方法的话，可以提前创建等于核心线程数的线程数量，这种方式被称为"),s("strong",[t._v("预热")]),t._v("，在抢购系统中就经常被用到")])]),t._v(" "),s("h3",{attrs:{id:"线程回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程回收"}},[t._v("#")]),t._v(" 线程回收")]),t._v(" "),s("p",[t._v("当线程池中创建的线程数量超过设置的 "),s("code",[t._v("corePoolSize")]),t._v("，在某些线程处理完任务后，如果等待 "),s("code",[t._v("keepAliveTime")]),t._v("时间后仍然没有新的任务分配给它，那么这个线程将会被回收。线程池回收线程时，会对所谓的“核心线程”和“非核心线程”一视同仁，直到线程池中线程的数量等于设置的 corePoolSize 参数，回收过程才会停止。")]),t._v(" "),s("p",[t._v("即使是 corePoolSize 线程，在一些非核心业务的线程池中，如果长时间地占用线程数量，也可能会影响到核心业务的线程池，这个时候就需要把没有分配任务的线程回收掉。")]),t._v(" "),s("p",[t._v("我们可以通过 allowCoreThreadTimeOut 设置项要求线程池：将包括“核心线程”在内的，没有任务分配的所有线程，在等待 keepAliveTime 时间后全部回收掉。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"线程池核心接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池核心接口"}},[t._v("#")]),t._v(" 线程池核心接口")]),t._v(" "),s("blockquote",[s("p",[t._v("Executor并不是线程池，只是一个执行线程的工具")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213428.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("ExecutorService")]),t._v("：普通线程池")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ScheduledExecutoService")]),t._v("：定时线程池")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ThreadPoolExecutor")]),t._v("：线程池核心类，ExecutorService的默认实现")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ScheduledThreadPoolExecutor")]),t._v("：继承自ThreadPoolExecutor实现了ScheduledExecutoService接口，周期性线程任务调度")])])]),t._v(" "),s("p",[s("strong",[t._v("ExecutorService普通线程池")])]),t._v(" "),s("p",[t._v("向线程池提交任务：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("execute(Runnable command)")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("submit(Collable<T> task || Runnable)")])])])]),t._v(" "),s("p",[s("strong",[t._v("ScheduledExecutoService定时线程池")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("scheduleAtFixedRate()")])])]),t._v(" "),s("h2",{attrs:{id:"【threadpoolexecutor线程池参数】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【threadpoolexecutor线程池参数】"}},[t._v("#")]),t._v(" 【ThreadPoolExecutor线程池参数】")]),t._v(" "),s("blockquote",[s("p",[t._v("ThreadPoolExecutor 是ExecutorService 的子类")])]),t._v(" "),s("p",[t._v("ThreadPoolExecutor的七大核心参数：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//核心池大小")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最大池大小")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程空闲后，保持存活的时间")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//时间单位")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞队列")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建线程的工厂")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拒绝策略")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ol",[s("li",[s("strong",[t._v("corePoolSize核心池")]),t._v("：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使有其他空闲线程可以处理任务也会创新线程，等到工作的线程数大于核心线程数时就不会在创建了。如果调用了线程池的"),s("code",[t._v("prestartAllCoreThreads")]),t._v("方法，线程池会提前把核心线程都创造好，并启动。如果等于0，则任务执行完后，没有任务请求进入时销毁线程池中的线程。如果大于0，即使本地任务执行完毕，核心线程也不会被销毁。设置过大会浪费系统资源，设置过小导致线程频繁创建。")]),t._v(" "),s("li",[s("strong",[t._v("maximumPoolSize最大池")]),t._v("：必须大于等于1，且大于等于corePoolSize。如果与corePoolSize相等，则线程池大小固定。如果大于corePoolSize，则最多创建maximumPoolSize个线程执行任务，其他任务加入到workQueue缓存队列中，当workQueue为空且执行任务数小于maximumPoolSize时，线程空闲时间超过keepAliveTime会被回收。线程池允许创建的最大线程数。如果队列满了，并且以创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。如果我们使用了无界队列，那么所有的任务会加入队列，这个参数就没有什么效果了")]),t._v(" "),s("li",[s("strong",[t._v("keepAliveTime线程空闲时间")]),t._v("：线程池中线程空闲时间达到keepAliveTime值时，线程会被销毁，只到剩下corePoolSize个线程为止。默认情况下，线程池的最大线程数大于corePoolSize时，keepAliveTime才会起作用。线程池的工作线程空闲后，保持存活的时间。如果没有任务处理了，有些线程会空闲，空闲的时间超过了这个值，会被回收掉。如果任务很多，并且每个任务的执行时间比较短，避免线程重复创建和回收，可以调大这个时间，提高线程的利用率")]),t._v(" "),s("li",[s("strong",[t._v("unit")]),t._v("：keepAliveTIme的时间单位")]),t._v(" "),s("li",[s("strong",[t._v("workQueue阻塞队列")]),t._v("："),s("font",{attrs:{color:"red"}},[t._v("当提交的任务数超过核心线程数大小后，再提交的任务就存放在这里")]),t._v("。它仅仅用来存放被 "),s("code",[t._v("execute")]),t._v("方法提交的 "),s("code",[t._v("Runnable")]),t._v("任务")],1),t._v(" "),s("li",[s("strong",[t._v("threadFactory创建线程工厂")]),t._v("：用来生产一组相同任务的线程。主要用于设置生成的线程名词前缀、是否为守护线程以及优先级等。"),s("strong",[t._v("设置有意义的名称前缀有利于在进行虚拟机分析时，知道线程是由哪个线程工厂创建的。")])]),t._v(" "),s("li",[s("strong",[t._v("handler拒绝策略")]),t._v("：当队列里面放满了任务、最大线程数的线程都在工作时，这时继续提交的任务线程池就处理不了，应该执行怎么样的拒绝策略，默认有4种策略")])]),t._v(" "),s("p",[s("strong",[t._v("创建实例：")])]),t._v(" "),s("p",[s("code",[t._v("总线程数 = maxPoolSize + queue.size")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                              "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                              "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认的线程工厂")]),t._v("\n                                              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AbortPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213433.png",alt:"123"}})]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"【线程数配置】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【线程数配置】"}},[t._v("#")]),t._v(" 【线程数配置】")]),t._v(" "),s("p",[t._v("根据真实的业务场景来配置，公式只能作为参考，因为它是两种极端场景，而真实的业务场景往往是介于两者之间。")]),t._v(" "),s("p",[s("font",{attrs:{color:"#2ed573"}},[s("strong",[t._v("要根据具体情况，计算出一个大概的数值，再通过实际的性能测试，计算出一个合理的线程数量")])])],1),t._v(" "),s("blockquote",[s("p",[t._v("拿美团来说，下午3，4点的流量，能和 12 点左右午饭时的流量比吗？")])]),t._v(" "),s("p",[s("strong",[t._v("【线程数量太小】")])]),t._v(" "),s("p",[t._v("线程数量太小，同一时间大量请求将被阻塞在线程队列中排队等待执行线程，此时 CPU 没有得到充分利用；")]),t._v(" "),s("p",[s("strong",[t._v("【线程数量太大】")])]),t._v(" "),s("p",[t._v("当线程数量太大，被创建的执行线程同时在争取 CPU 资源，又会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率")]),t._v(" "),s("p",[s("strong",[t._v("【如何判断是 CPU 密集任务还是 IO 密集任务】")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序")])]),t._v(" "),s("li",[s("p",[t._v("但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上")])])]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"cpu密集型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu密集型"}},[t._v("#")]),t._v(" CPU密集型")]),t._v(" "),s("p",[s("strong",[t._v("N（CPU 核心数）+ 1")])]),t._v(" "),s("p",[t._v("这种任务消耗的主要是 CPU 资源，应当充分利用CPU资源。"),s("code",[t._v("+1")]),t._v("是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停是线程进入到阻塞状态。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以"),s("strong",[t._v("充分利用 CPU 的空闲时间")]),t._v("。")]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"io密集型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io密集型"}},[t._v("#")]),t._v(" IO密集型")]),t._v(" "),s("p",[s("strong",[t._v("2 * N（CPU核数）")])]),t._v(" "),s("p",[t._v("这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程。")]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"真实业务场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#真实业务场景"}},[t._v("#")]),t._v(" 真实业务场景")]),t._v(" "),s("p",[t._v("参考以下公式来计算线程数：")]),t._v(" "),s("p",[s("font",{attrs:{color:"#ff4757"}},[s("strong",[t._v("线程数 = CPU 核心数 *（ 1 - IO 阻塞系数）")])])],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213439.png",alt:"image-20201008184700324"}})]),t._v(" "),s("p",[t._v("我们可以通过 JDK 自带的工具 VisualVM 来查看 WT/ST 比例：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WT")]),t._v("（线程等待时间）"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36788")]),t._v("ms "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("线程运行总时间"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36788")]),t._v("ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ST")]),t._v("（线程时间运行时间）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n线程数 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CPU")]),t._v(" 核数）"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WT")]),t._v("（线程等待时间）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36788")]),t._v("ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ST")]),t._v("（线程时间运行时间）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CPU")]),t._v(" 核数）\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("可以根据自己的业务场景，从“N+1”和“2N”两个公式中选出一个适合的.")]),t._v(" "),s("ul",[s("li",[t._v("先计算出一个大概的线程数量")]),t._v(" "),s("li",[t._v("之后通过实际压测，逐渐往“增大线程数量”和“减小线程数量”这两个方向调整，然后观察整体的处理时间变化，最终确定一个具体的线程数量")])]),t._v(" "),s("p",[s("code",[t._v("utilization")]),t._v("CPU利用率")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213444.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"【线程池五种状态】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【线程池五种状态】"}},[t._v("#")]),t._v(" 【线程池五种状态】")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("Running")]),t._v("：接收新任务，处理已添加的任务")]),t._v(" "),s("li",[s("strong",[t._v("Shutdown")]),t._v("：不接受新任务，处理已添加任务（处理队列中的任务）")]),t._v(" "),s("li",[s("strong",[t._v("Stop")]),t._v("：不接受新任务，不处理已添加任务，并且中断当前正在处理的任务")]),t._v(" "),s("li",[s("strong",[t._v("Tydying")]),t._v("：所有任务已终止，"),s("code",[t._v("ctl = 0")]),t._v("（ctl记录线城池的运行状态和活动线程数）")]),t._v(" "),s("li",[s("strong",[t._v("Terminated")]),t._v("：线程池销毁")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617213449.png",alt:"image-20201026105352295"}})]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"juc下的四大线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#juc下的四大线程池"}},[t._v("#")]),t._v(" JUC下的四大线程池")]),t._v(" "),s("p",[s("strong",[t._v("Exeutors")]),t._v("类的==静态工厂==提供了常用的线程池")]),t._v(" "),s("blockquote",[s("p",[t._v("直接通过 Exeutors.方法名调用（静态方法）")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("静态方法")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("newCachedThreadPool")])]),t._v(" "),s("td",[t._v("可缓存的线程池，可创建任意大小的线程数，只要不超出JVM方法区（本地内存）的大小即可。60s会回收部分空闲线程")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("newFixedThreadPool")])]),t._v(" "),s("td",[t._v("定长线程池，大小固定且不能更改。可控制线程最大并发数，超出的线程会在队列中等待")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("newScheduledThreadPool")])]),t._v(" "),s("td",[t._v("定时及周期性任务执行线程任务")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("newSingleThreadExecutor")])]),t._v(" "),s("td",[t._v("单线程的线程池。单线程串型执行所有任务， 如果产生了异常，会有新的线程来替代，保证所有任务按序执行")])])])]),t._v(" "),s("ol",[s("li",[t._v("CachedThreadPool：初始核心线程数量为0，最大线程数量为Integer.MAX_VALUE，线程空闲时存活时间为60秒，并且它的阻塞队列为SynchronousQueue，它的初始长度为0，这会导致任务每次进来都会创建线程来执行，在线程空闲时，存活时间到了又会释放线程资源")]),t._v(" "),s("li",[t._v("FixedThreadPool：线程池线程数量固定，即"),s("code",[t._v("corePoolSize")]),t._v("和"),s("code",[t._v("maximumPoolSize")]),t._v("数量一样")]),t._v(" "),s("li",[t._v("SingleThreadPool：单个线程的线程池")]),t._v(" "),s("li",[t._v("ScheduledThreadPool：创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer")])]),t._v(" "),s("h2",{attrs:{id:"为什么不建议使用executors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么不建议使用executors"}},[t._v("#")]),t._v(" 为什么不建议使用Executors")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 的构造函数声明线程池")]),t._v(" "),s("p",[t._v("线程池必须手动通过 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 的构造函数来声明，避免使用"),s("code",[t._v("Executors")]),t._v(" 类的 "),s("code",[t._v("newFixedThreadPool")]),t._v(" 和 "),s("code",[t._v("newCachedThreadPool")]),t._v(" ，因为可能会有 OOM 的风险。")]),t._v(" "),s("p",[s("strong",[t._v("答：原因如下")])]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[t._v("1. 只有使用有界队列，才能控制线程创建数量")])])],1),t._v(" "),s("p",[t._v("**2. ThreadPoolExecutor能根据业务场景来灵活配置。**实际使用中需要根据自己机器的性能、业务场景来手动配置线程池的参数比如核心线程数、使用的任务队列、饱和策略等等")]),t._v(" "),s("p",[s("strong",[t._v("3. 应该显示地给我们的线程池命名，这样有助于定位问题")])]),t._v(" "),s("br"),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"四大拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四大拒绝策略"}},[t._v("#")]),t._v(" 四大拒绝策略")]),t._v(" "),s("h3",{attrs:{id:"abortpolicy终止策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abortpolicy终止策略"}},[t._v("#")]),t._v(" AbortPolicy终止策略")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("使用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("当发生拒绝策略时，直接抛出异常，打断当前执行流程")]),t._v(" "),s("td",[t._v("抛出异常，终止程序执行")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbortPolicy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbortPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rejectedExecution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Task "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                                                 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" rejected from "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                                                 e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("ThreadPoolExecutor 中默认的策略就是AbortPolicy")]),t._v(" "),s("ul",[s("li",[t._v("使用无界队列的线程池时，内存撑爆了都不会触发拒绝策略。")]),t._v(" "),s("li",[t._v("自定义线程池实例时，使用这个策略一定要处理好触发策略时抛的异常，因为他会打断当前的执行流程")])]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"callerrunspolicy调用者运行策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#callerrunspolicy调用者运行策略"}},[t._v("#")]),t._v(" CallerRunsPolicy调用者运行策略")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("使用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("当触发拒绝策略时，只要线程池没有关闭，就由提交任务的当前线程处理")]),t._v(" "),s("td",[t._v("一般在不允许失败的、对性能要求不高、并发量较小的场景下使用")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallerRunsPolicy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallerRunsPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rejectedExecution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isShutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("使用场景：一般在不允许失败的、对性能要求不高、并发量较小的场景下使用，因为线程池一般情况下不会关闭，也就是提交的任务一定会被运行，但是由于是调用者线程自己执行的，当多次提交任务时，就会阻塞后续任务执行，性能和效率自然就慢了。")]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"discardpolicy丢弃策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#discardpolicy丢弃策略"}},[t._v("#")]),t._v(" DiscardPolicy丢弃策略")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("使用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("当发生拒绝策略时，直接丢弃任务，不做处理")]),t._v(" "),s("td",[t._v("任务无关紧要或者空实现")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiscardPolicy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiscardPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rejectedExecution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("br"),t._v(" "),s("h3",{attrs:{id:"discardoldestpolicy弃老策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#discardoldestpolicy弃老策略"}},[t._v("#")]),t._v(" DiscardOldestPolicy弃老策略")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("使用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("如果线程池未关闭，就弹出队列头部的元素（丢弃最先的任务），然后尝试执行")]),t._v(" "),s("td",[t._v("尝试和最先开始执行的线程竞争，竞争成功则执行，失败则被丢弃")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiscardOldestPolicy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiscardOldestPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rejectedExecution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isShutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("【实际使用场景】")]),t._v(" "),s("p",[t._v("发布消息，和修改消息，当消息发布出去后，还未执行，此时更新的消息又来了，这个时候未执行的消息的版本比现在提交的消息版本要低就可以被丢弃了。因为队列中还有可能存在消息版本更低的消息会排队执行，所以在真正处理消息的时候一定要做好消息的版本比较")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"线程池提交任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池提交任务"}},[t._v("#")]),t._v(" 线程池提交任务")]),t._v(" "),s("p",[t._v("可以使用两个方法向线程池提交任务，分别为"),s("strong",[t._v("execute() 和 submit()方法")])]),t._v(" "),s("p",[s("code",[t._v("execute()")]),t._v("方法用于提交"),s("strong",[t._v("不需要返回值")]),t._v("的任务，所以无法判断任务是否被线程池执行成功")]),t._v(" "),s("p",[s("code",[t._v("submit()")]),t._v("方法用于提交需要返回值的任务")]),t._v(" "),s("ul",[s("li",[t._v("线程池会返回一个Future类型的对象，通过这个Future对象可以判断任务是否执行成功。并且可以通过Future的"),s("code",[t._v("get()")]),t._v("方法来获取返回值，并且能够捕获异常，get()方法会阻塞当前线程直到任务完成")]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("get(long timeout，TimeUnit unit)")]),t._v("方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("线程中提交方法")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("传入参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("execute()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Runnable")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("submit()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Runnable 或 Callable")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Future 对象")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// submit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//execute")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("submit 方法主要做了两件事情：")])]),t._v(" "),s("ol",[s("li",[t._v("把 Runnable 和 Callable 都转化成 FutureTask")]),t._v(" "),s("li",[t._v("使用 execute 方法执行 FutureTask")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"关闭线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭线程池"}},[t._v("#")]),t._v(" 关闭线程池")]),t._v(" "),s("p",[t._v("线程池提供了2个关闭方法："),s("code",[t._v("shutdown")]),t._v(" 和 "),s("code",[t._v("shutdownNow")]),t._v("。")]),t._v(" "),s("p",[t._v("当调用者两个方法之后，线程池会遍历内部的工作线程，然后调用每个工作线程的"),s("strong",[t._v("interrrupt")]),t._v("方法给线程发送中断信号，内部如果无法响应中断信号的可能永远无法终止，所以如果内部有无线循环的，最好在循环内部检测一下线程的中断信号，合理的退出。调用者两个方法中任意一个，线程池的"),s("code",[t._v("isShutdown")]),t._v("方法就会返回true，当所有的任务线程都关闭之后，才表示线程池关闭成功，这时调用"),s("code",[t._v("isTerminaed")]),t._v("方法会返回true。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("调用"),s("code",[t._v("shutdown")]),t._v("方法之后，线程池将不再接收新任务，"),s("strong",[t._v("内部会将"),s("code",[t._v("所有")]),t._v("已提交的任务处理完毕")]),t._v("，处理完毕之后，工作线程自动退出")])]),t._v(" "),s("li",[s("p",[t._v("调用"),s("code",[t._v("shutdownNow")]),t._v("方法后，"),s("strong",[t._v("线程池会将还未处理的（在队里等待处理的任务）任务移除，将正在处理中的处理完毕之后，工作线程自动退出")])])])]),t._v(" "),s("p",[t._v("至于调用哪个方法来关闭线程，应该由提交到线程池的任务特性决定，多数情况下调用"),s("code",[t._v("shutdown")]),t._v("方法来关闭线程池，如果任务不一定要执行完，则可以调用"),s("code",[t._v("shutdownNow")]),t._v("方法。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"常见的阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的阻塞队列"}},[t._v("#")]),t._v(" 常见的阻塞队列")]),t._v(" "),s("p",[s("strong",[t._v("ArrayBlockingQueue")]),t._v("：是一个基于数组的"),s("strong",[t._v("有界")]),t._v("阻塞队列")]),t._v(" "),s("p",[s("strong",[t._v("LinkedBlockingQueue")]),t._v("：一个基于链表结构的阻塞队列，静态工厂方法"),s("code",[t._v("newFixedThreadPool")]),t._v("使用了这个队列")]),t._v(" "),s("p",[s("strong",[t._v("PriorityBlockingQueue")]),t._v("：基于数组实现的优先级队列，进入队列的元素按照优先级会进行排序")]),t._v(" "),s("p",[s("strong",[t._v("SynchronousQueue")]),t._v("：一个不存储元素的阻塞队列，每个插入操作必须等到另外一个线程调用移除操作，否则插入操作一直处理阻塞状态。静态工厂方法"),s("code",[t._v("newCachedThreadPool")]),t._v("使用这个队列")]),t._v(" "),s("ol",[s("li",[t._v("SynchronousQueue没有容量。与其他BlockingQueue不同，SynchronousQueue是一个不存储元素的BlockingQueue。每一个put操作必须要等待一个take操作，否则不能继续添加元素，反之亦然。")]),t._v(" "),s("li",[t._v("因为没有容量，所以对应 peek, contains, clear, isEmpty … 等方法其实是无效的。例如clear是不执行任何操作的，contains始终返回false,peek始终返回null。")]),t._v(" "),s("li",[t._v("SynchronousQueue分为公平和非公平，默认情况下采用非公平性访问策略，当然也可以通过构造函数来设置为公平性访问策略（为true即可）。")]),t._v(" "),s("li",[t._v("若使用 TransferQueue, 则队列中永远会存在一个 dummy node")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"线程是如何复用的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程是如何复用的"}},[t._v("#")]),t._v(" 线程是如何复用的")]),t._v(" "),s("ol",[s("li",[t._v("Worker 初始化时把当前 Worker 作为线程的构造器入参，Worker 的 run 方法中调用了 runWorker 方法。")]),t._v(" "),s("li",[t._v("通过取 Worker 的 firstTask 或者通过 getTask 方法从 workQueue 中不停地取任务.")]),t._v(" "),s("li",[t._v("直接调用 Runnable 的 run 方法来执行任务，这样就保证了每个线程都始终在一个循环中，反复获取任务，然后执行任务，从而实现了线程的复用")])]),t._v(" "),s("h2",{attrs:{id:"一个线程池中的线程异常了-那么线程池会怎么处理这个线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个线程池中的线程异常了-那么线程池会怎么处理这个线程"}},[t._v("#")]),t._v(" 一个线程池中的线程异常了，那么线程池会怎么处理这个线程")]),t._v(" "),s("ol",[s("li",[t._v("当执行方式是"),s("code",[t._v("execute")]),t._v("时，可以看到堆栈异常的输出")]),t._v(" "),s("li",[t._v("当执行方式是"),s("code",[t._v("submit")]),t._v("时，堆栈异常没有输出。但是调用Future.get()方法时，可以捕获到异常")]),t._v(" "),s("li",[t._v("不会影响线程池里面其他线程的正常执行")]),t._v(" "),s("li",[t._v("线程池会把这个线程移除掉，并创建一个新的线程放到线程池中")])]),t._v(" "),s("h2",{attrs:{id:"单核cpu线程安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单核cpu线程安全问题"}},[t._v("#")]),t._v(" 单核CPU线程安全问题")]),t._v(" "),s("p",[t._v("单核CPU不能保证调度的顺序性和任务的原子性，如果操作不是原子操作，你无法控制cpu在什么时机切换线程")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/37396742",target:"_blank",rel:"noopener noreferrer"}},[t._v("单核cpu"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);