(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{562:function(t,e,s){"use strict";s.r(e);var a=s(3),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("文章的内容比较基础，俺会继续补充深入的，冲冲冲...")])]),t._v(" "),e("h2",{attrs:{id:"servlet生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet生命周期"}},[t._v("#")]),t._v(" Servlet生命周期")]),t._v(" "),e("h3",{attrs:{id:"_1-servlet中的生命周期方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-servlet中的生命周期方法"}},[t._v("#")]),t._v(" 1.Servlet中的生命周期方法")]),t._v(" "),e("p",[t._v("Servlet 加载——>实例化——>服务——>销毁")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200130182916583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"E:\\MarkText\\Cache-img"}}),t._v("\n【图是借来的，原文链接 "),e("a",{attrs:{href:"https://blog.csdn.net/hu1010037197/article/details/80215093",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Servlet的生命周期简述")]),e("OutboundLink")],1),t._v("】")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("init( )")])]),t._v(" "),e("p",[t._v("在Servlet的生命周期中，仅执行一次"),e("code",[t._v("init()")]),t._v("方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以在启动服务器或客户机首次访问时装入Servlet。无论有多少客户机访问Servlet，"),e("code",[t._v("init()")]),t._v("只执行一次。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("service( )：")])]),t._v(" "),e("p",[t._v("执行多次。它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象时，该对象的"),e("code",[t._v("service()")]),t._v("方法就要调用，而且传递给这个方法一个 "),e("strong",[t._v("“请求”")]),t._v("（ServletRequest）对象和一个 "),e("strong",[t._v("“响应”")]),t._v("（ServletResponse）对象作为参数。在HttpServlet中已存在"),e("code",[t._v("service()")]),t._v("方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("destroy( )：")])]),t._v(" "),e("p",[t._v("仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行"),e("code",[t._v("service()")]),t._v("方法时可能会产生其他的线程，因此需要确认在调用"),e("code",[t._v("destroy()")]),t._v("方法时，这些线程已经终止或完成。")])])]),t._v(" "),e("h4",{attrs:{id:"_1-1-创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建"}},[t._v("#")]),t._v(" 1.1 创建")]),t._v(" "),e("p",[e("strong",[t._v("创建")]),t._v("执行"),e("code",[t._v("init()")]),t._v("方法，只执行一次，加载资源")]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--配置ServletMethods--\x3e")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("ServletMethods"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.iqqcode.web.servlet.ServletMethods"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--指定Servle的创建时机(在服务器启动时被创建)\n                1.第一次被访问时创建\n                    * <load-on-startup>的默认值为-1\n                2.在服务器启动时创建\n                    * <load-on-startup>的值为0或正整数\n         --\x3e")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("load-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("-5"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("load-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-mapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("ServletMethods"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("url-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/ServletMethods"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("url-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-mapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("p",[e("code",[t._v("<load-on-startup> 1</load-on-startup>")]),t._v("启动时没有创建servlet，在启动"),e("strong",[t._v("后")]),t._v("调用"),e("code",[t._v("init()")])]),t._v(" "),e("p",[e("code",[t._v("<load-on-startup>-5</load-on-startup>")]),t._v("启动时创建servlet，在启动"),e("strong",[t._v("前")]),t._v("调用"),e("code",[t._v("init()")])]),t._v(" "),e("p",[t._v("指定Servle的创建时机(在服务器启动时被创建)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("第一次被访问时创建 "),e("code",[t._v("<load-on-startup>")]),t._v("的默认值为-1")])]),t._v(" "),e("li",[e("p",[t._v("在服务器启动时创建  "),e("code",[t._v("<load-on-startup>")]),t._v("的值为0或正整数")])])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("Servlet的"),e("code",[t._v("init()")]),t._v("方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的(单例：一个类只能产生一个对象)")]),t._v(" "),e("p",[t._v("那么，为什么Servlet时单例的呢？因为多个用户同时访问时，可能存在线程安全问题。如果同时读，那么数据不会被修改，就没有问题。但是如果A在修改，B在读取，可能就会造成数据不一致的问题。")]),t._v(" "),e("p",[t._v("如何解决呢？")]),t._v(" "),e("p",[t._v("可能大家会想到加锁，但是没法通过"),e("strong",[t._v("同步方法来")]),t._v("上锁，因为Servlet是定义了一个标准，我们是来实现的，不能再外部修改，在"),e("code",[t._v("service()")]),t._v("方法中无法实现。"),e("strong",[t._v("同步代码块")]),t._v("上锁之后，一次只允许一个对象来访问资源，对于服务器来说性能低下。")]),t._v(" "),e("p",[t._v("解决：")]),t._v(" "),e("p",[t._v("尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要修改值。")]),t._v(" "),e("p",[t._v("如果将变量定义在方法中，为局部变量，此时对象在栈中，不共享只在此方法中有效。")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//提供服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" servletRequest"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" servletResponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Servlet!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h4",{attrs:{id:"_1-2-提供服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-提供服务"}},[t._v("#")]),t._v(" 1.2 提供服务")]),t._v(" "),e("p",[e("strong",[t._v("提供服务")]),t._v("时执行"),e("code",[t._v("service()")]),t._v("方法，执行多次。每次访问Servlet时，"),e("code",[t._v("service()")]),t._v("方法都会被调用一次")]),t._v(" "),e("p",[t._v("参数 "),e("strong",[t._v("service(ServletRequest servletRequest, ServletResponse servletResponse)")])]),t._v(" "),e("p",[e("strong",[t._v("ServletRequest & ServletResponse")])]),t._v(" "),e("p",[t._v("对于每一个HTTP请求，servlet容器会创建一个封装了HTTP请求的ServletRequest实例传递给servlet的service方法，ServletResponse则表示一个Servlet响应，其隐藏了将响应发给浏览器的复杂性。通过ServletRequest的方法你可以获取一些请求相关的参数，而ServletResponse则可以将设置一些返回参数信息，并且设置返回内容。")]),t._v(" "),e("h4",{attrs:{id:"_1-3-被销毁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-被销毁"}},[t._v("#")]),t._v(" 1.3 被销毁")]),t._v(" "),e("p",[e("strong",[t._v("Servlet被销毁")]),t._v("(服务器正常关闭)前执行"),e("code",[t._v("destroy")]),t._v("方法，只执行一次 ，释放资源")]),t._v(" "),e("h3",{attrs:{id:"_2-servlet工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-servlet工作原理"}},[t._v("#")]),t._v(" 2.Servlet工作原理")]),t._v(" "),e("p",[t._v("当Web服务器接收到一个HTTP请求时，它会先判断请求内容——")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果是静态网页数据，Web服务器将会自行处理，然后产生响应信息；")])]),t._v(" "),e("li",[e("p",[t._v("如果牵涉到动态数据，Web服务器会将请求转交给Servlet容器。此时Servlet容器会找到对应的处理该请求的Servlet实例来处理，结果会送回Web服务器，再由Web服务器传回用户端。")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200130183022292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("针对同一个Servlet，Servlet容器会在第一次收到Http请求时建立一个Servlet实例，然后启动一个线程。第二次收到Http请求时，Servlet容器无须建立相同的Servlet实例，而是启动第二个线程来服务客户端请求。所以多线程方式不但可以提高Web应用程序的执行效率，也可以降低Web服务器的系统负担。")]),t._v(" "),e("h3",{attrs:{id:"_3-容器与web应用上下文的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器与web应用上下文的关系"}},[t._v("#")]),t._v(" 3.容器与Web应用上下文的关系")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Tomcat就是容器，其它替代者有Jetty、JBoss等等。")])]),t._v(" "),e("li",[e("p",[t._v("JavaWeb应用就是包含了一组Servlet、JSP、HTML等各种文件的一个集合。就是一定要放在在WEB-INF 目录下（包含web.xml文件）。")])])]),t._v(" "),e("p",[t._v("下图的Tomcat的组成结构刚好可以解释Java web里面最常见的一些概念：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200130183048452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("ul",[e("li",[e("p",[t._v("顶层的Server元素代表Tomcat容器")])]),t._v(" "),e("li",[e("p",[t._v("一个Server可以包含多个Service组件")])]),t._v(" "),e("li",[e("p",[t._v("一个Service里面可以有多个负责接受与响应客户请求的Connector组件")])]),t._v(" "),e("li",[e("p",[t._v("一个Service只能包含一个Engine组件")])]),t._v(" "),e("li",[e("p",[t._v("一个Engine组件可以包含多个虚拟主机（Host）组件（localhost是默认创建的主机，你还可以创建更多的虚拟主机，并且只要把DNS指向这台机器，就可以访问这个虚拟主机的URL）")])]),t._v(" "),e("li",[e("p",[t._v("一个Host组件可以包含多个Context。一个Context就代表一个Web应用。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("容器在启动一个Web应用时就创建一个ServletContext对象和这个应用对应起来，并且这个对象和Web应用的生命周期一致。因此，可以利用这个对象来存储全局数据。")])]),t._v(" "),e("h3",{attrs:{id:"_4-web服务器工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-web服务器工作流程"}},[t._v("#")]),t._v(" 4.Web服务器工作流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200130183100201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("Servlet工作原理时序图")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("Web Client 向Servlet容器（Tomcat）发出Http请求；")]),t._v(" "),e("li",[t._v("Servlet容器接收Web Client的请求；")]),t._v(" "),e("li",[t._v("Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中；")]),t._v(" "),e("li",[t._v("Servlet容器创建一个HttpResponse对象；")]),t._v(" "),e("li",[t._v("Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet对象；")]),t._v(" "),e("li",[t._v("HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息；")]),t._v(" "),e("li",[t._v("HttpServlet调用HttpResponse对象的有关方法，生成响应数据；")]),t._v(" "),e("li",[t._v("Servlet容器把HttpServlet的响应结果传给Web Client；")])])]),t._v(" "),e("p",[e("strong",[t._v("Web应用的生命周期")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("启动阶段：加载Web应用的数据，创建ServletContext对象，对Filter和一些Servlet进行初始化。")])]),t._v(" "),e("li",[e("p",[t._v("运行阶段：所有的Servlet都处于待命状态，随时可以响应客户端的请求。")])]),t._v(" "),e("li",[e("p",[t._v("终止阶段：销毁各种对象和资源。")])])]),t._v(" "),e("p",[t._v("【参考文章】")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/danielzhou888/article/details/70835418",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("说说Servlet 生命周期、工作原理")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000020758621#item-0-2",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Servlet 工作原理详解")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000007756367",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Servlet核心")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000020758621#item-0-2",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Servlet 工作原理详解")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000007756367",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Servlet核心")]),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);