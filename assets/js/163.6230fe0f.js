(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{491:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-hashtable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashtable"}},[s._v("#")]),s._v(" 1. Hashtable")]),s._v(" "),t("p",[s._v("重量级锁，"),t("code",[s._v("synchronized")]),s._v("都是加到了方法上，效率低")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200015.png",alt:"c"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617203816.png",alt:"彻底搞清楚ConcurrentHashMap的实现原理(含JDK1.7和JDK1.8的区别)"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200027.png",alt:"image-20200812121435449"}})]),s._v(" "),t("p",[s._v("5和3添加的位置不同，但是由于是重量级锁，所以5无法获取锁，只能等待")]),s._v(" "),t("ul",[t("li",[s._v("HashTable "),t("strong",[s._v("不允许")]),s._v(" "),t("code",[s._v("key")]),s._v("和"),t("code",[s._v("value")]),s._v("为null")]),s._v(" "),t("li",[s._v("ConcurrentHashMap "),t("strong",[s._v("不允许")]),s._v(" "),t("code",[s._v("key")]),s._v("和"),t("code",[s._v("value")]),s._v("为null")]),s._v(" "),t("li",[t("strong",[s._v("HashTable是线程安全的")])])]),s._v(" "),t("br"),s._v(" "),t("p",[s._v("基于这样的效率低的问题，"),t("strong",[s._v("ConcurrentHashMap")]),s._v("来了。")]),s._v(" "),t("p",[s._v("主要就是为了应对HashMap在并发环境下不安全而诞生的，ConcurrentHashMap的设计与实现非常精巧，大量的利用了"),t("code",[s._v("volatile")]),s._v("，"),t("code",[s._v("final")]),s._v("，"),t("strong",[s._v("CAS")]),s._v("等"),t("strong",[s._v("lock-free")]),s._v("技术来减少锁竞争对于性能的影响。")]),s._v(" "),t("p",[t("strong",[s._v("ConcurrentHashMap避免了对全局加锁改成了局部加锁操作")]),s._v("，这样就极大地提高了并发环境下的操作速度，由于ConcurrentHashMap在JDK1.7和1.8中的实现非常不同，接下来我们谈谈JDK在1.7和1.8中的区别。")]),s._v(" "),t("h2",{attrs:{id:"_2-hashtable与hashmap对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-hashtable与hashmap对比"}},[s._v("#")]),s._v(" 2. Hashtable与HashMap对比")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("**线程安全：**Hashtable线程安全")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现方式不同")]),s._v("：Hashtable 继承了 Dictionary类，而 HashMap 继承的是 AbstractMap 类。二者都实现了Map接口")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("初始化容量不同")]),s._v("：HashMap 的初始容量为：16，Hashtable 初始容量为：11，两者的负载因子默认都是：0.75。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("扩容机制不同")]),s._v("：当现有容量大于总容量 * 负载因子时，HashMap 扩容规则为当前容量翻倍；Hashtable 扩容规则为"),t("code",[s._v("2N + 1")]),s._v("。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("迭代器不同")]),s._v("：HashMap 中的 Iterator 迭代器是 "),t("strong",[s._v("fail-fast")]),s._v(" 的，而 Hashtable 的 Enumerator 不是 fail-fast 的。")]),s._v(" "),t("p",[s._v("所以，当其他线程改变了HashMap 的结构，如：增加、删除元素，将会抛出"),t("code",[s._v("ConcurrentModificationException")]),s._v(" 异常，而 Hashtable 则不会。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("key和value是否允许null值：")]),s._v(" Hashtable不予许为"),t("code",[s._v("null-null")]),s._v("；HashMap只允许有一个")])])]),s._v(" "),t("blockquote",[t("p",[s._v("当get()方法返回null值时，可能是 HashMap中没有该键，也可能使该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用**containsKey()**方法来判断")])]),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"_3-fail-fast机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-fail-fast机制"}},[s._v("#")]),s._v(" 3. fail-fast机制")]),s._v(" "),t("p",[t("strong",[s._v("Hashtable迭代器提供了fail-fast机制")])]),s._v(" "),t("p",[s._v("**快速失败（fail—fast）**是java集合中的一种机制， 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出"),t("code",[s._v("Concurrent Modification Exception")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 "),t("code",[s._v("modCount")]),s._v("变量，集合在被遍历期间如果内容发生变化，就会改变"),t("code",[s._v("modCount")]),s._v("的值。")]),s._v(" "),t("p",[s._v("每当迭代器使用**hashNext()/next()**遍历下一个元素之前，都会检测"),t("code",[s._v("modCount")]),s._v("变量是否等于"),t("code",[s._v("expectedmodCount")]),s._v("值，是的话就返回遍历；否则抛出异常，终止遍历。")]),s._v(" "),t("p",[s._v("迭代器的"),t("code",[s._v("remove")]),s._v("同步了"),t("code",[s._v("expectedModCount")]),s._v(" 和"),t("code",[s._v("modCount")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200034.png",alt:""}})]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Map<String, String> map = new ConcurrentHashMap<>();")]),s._v("\n    map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),s._v(" var2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("var2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("var2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用iterator的remove()")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//map.remove(s);")]),s._v("\n            var2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//保证了modCount和exceptedModCount相等")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("Tip")]),s._v("：**安全失败（fail—safe）**java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。")])]),s._v(" "),t("p",[t("strong",[s._v("JDK-7")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200039.png",alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("JDK-8")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200053.png",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200100.png",alt:"image-20201004175151092"}})]),s._v(" "),t("h2",{attrs:{id:"_4-【jdk7-分段锁】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-【jdk7-分段锁】"}},[s._v("#")]),s._v(" 4. 【JDK7-分段锁】")]),s._v(" "),t("p",[s._v("JDK-7 ConcurrentHashMap 是由：")]),s._v(" "),t("p",[t("strong",[s._v("Segment分段锁🔒 + HashEntry数组")]),s._v(" 组成")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Segment 实现了 "),t("strong",[s._v("ReentrantLock")]),s._v("可重入锁保证线程安全")])]),s._v(" "),t("li",[t("p",[s._v("HashEntry 用于存储键值对数据。"),t("strong",[s._v("当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。")])])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200113.jpg",alt:"JDK1.7的ConcurrentHashMap"}})]),s._v(" "),t("p",[s._v("首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200122.png",alt:"彻底搞清楚ConcurrentHashMap的实现原理(含JDK1.7和JDK1.8的区别)"}})]),s._v(" "),t("h3",{attrs:{id:"put"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[s._v("#")]),s._v(" put")]),s._v(" "),t("ol",[t("li",[s._v("先定位到Segment，然后再进行put操作")]),s._v(" "),t("li",[s._v("如果获取失败肯定就有其他线程存在竞争，则利用 "),t("code",[s._v("scanAndLockForPut()")]),s._v(" "),t("strong",[s._v("自旋获取锁")])]),s._v(" "),t("li",[s._v("如果重试的次数达到了 "),t("code",[s._v("MAX_SCAN_RETRIES")]),s._v(" 则改为"),t("strong",[s._v("阻塞锁获取")]),s._v("，保证能获取成功")])]),s._v(" "),t("h3",{attrs:{id:"get"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[s._v("#")]),s._v(" get")]),s._v(" "),t("p",[s._v("ConcurrentHashMap定位一个元素的过程需要进行"),t("strong",[s._v("两次Hash")]),s._v("操作")]),s._v(" "),t("ul",[t("li",[s._v("第一次将 Key 通过 Hash 之后定位到具体的 Segment")]),s._v(" "),t("li",[s._v("第二次Hash定位到元素所在的"),t("strong",[s._v("链表的头部")])])]),s._v(" "),t("h3",{attrs:{id:"该结构的优劣势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#该结构的优劣势"}},[s._v("#")]),s._v(" 该结构的优劣势")]),s._v(" "),t("p",[t("strong",[s._v("【坏处】")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("遍历链表效率很低")])]),s._v(" "),t("li",[t("p",[s._v("这一种结构的带来的副作用是Hash的过程要比普通的HashMap要长")])])]),s._v(" "),t("p",[t("strong",[s._v("【好处】")])]),s._v(" "),t("p",[s._v("由于 HashEntry 中的 value 属性是用 "),t("code",[s._v("volatile")]),s._v("关键词修饰的，保证了内存可见性，所以每次获取时都是最新值")]),s._v(" "),t("p",[s._v("ConcurrentHashMap 的 get 方法是非常高效的，"),t("strong",[s._v("因为整个过程都不需要加锁")])]),s._v(" "),t("p",[s._v("如果容量大小是16，他的并发度就是16，可以同时允许16个线程操作16个Segment而且还是线程安全的")]),s._v(" "),t("p",[s._v("所以，通过这一种结构，ConcurrentHashMap的并发能力可以大大的提高。")]),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"_5-【jdk8的优化】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-【jdk8的优化】"}},[s._v("#")]),s._v(" 5. 【JDK8的优化】")]),s._v(" "),t("p",[s._v("JDK-8的ConcurrentHashMap")]),s._v(" "),t("p",[t("strong",[s._v("Node[ ] table数组 + 链表 + 红黑树")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("CAS + synchronized保证Node数组的线程安全")])]),s._v(" "),t("li",[t("strong",[s._v("Node：保存key，value及key的hash值。其中value和next都用volatile修饰，保证并发的可见性")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200138.jpg",alt:"JDK1.8的ConcurrentHashMap"}})]),s._v(" "),t("p",[t("strong",[s._v("与HashMap很类似")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200143.png",alt:"img"}})]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v("只锁定当前链表或红黑二叉树的"),t("strong",[s._v("首节点")]),s._v("，这样只要"),t("code",[s._v("hash")]),s._v("不冲突，就不会产生并发，效率又提升N倍。")]),s._v(" "),t("p",[s._v("把之前的HashEntry改成了"),t("strong",[s._v("Node")]),s._v("，但是作用不变，把值和next采用了"),t("code",[s._v("volatile")]),s._v("去修饰，保证了可见性，并且也引入了红黑树，在链表大于一定值的时候会转换（默认是8）")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Entry")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" hash"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//... 省略部分代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("链表（寻址时间复杂度为O(N)）、红黑树（寻址时间复杂度为O(log(N))）")]),s._v(" "),t("h3",{attrs:{id:"put-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#put-2"}},[s._v("#")]),s._v(" put")]),s._v(" "),t("ol",[t("li",[s._v("根据 key 计算出 hashcode")]),s._v(" "),t("li",[s._v("判断是否需要进行初始化")]),s._v(" "),t("li",[s._v("当前 key 定位出 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功")]),s._v(" "),t("li",[s._v("如果当前位置的 "),t("code",[s._v("hashcode == MOVED == -1")]),s._v("，则需要进行扩容")]),s._v(" "),t("li",[s._v("如果都不满足，则利用 **synchronized **锁写入数据")]),s._v(" "),t("li",[s._v("如果数量大于 "),t("code",[s._v("TREEIFY_THRESHOLD")]),s._v(" ，则要转换为红黑树")])]),s._v(" "),t("h3",{attrs:{id:"锁升级过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁升级过程"}},[s._v("#")]),s._v(" 锁升级过程")]),s._v(" "),t("p",[s._v("针对 synchronized 获取锁的方式，JVM 使用了锁升级的优化方式。")]),s._v(" "),t("ol",[t("li",[s._v("先使用"),t("strong",[s._v("偏向锁")]),s._v("，优先同一线程获取")]),s._v(" "),t("li",[s._v("如果失败，就升级为 "),t("strong",[s._v("CAS 轻量级锁")])]),s._v(" "),t("li",[s._v("如果失败就会短暂"),t("strong",[s._v("自旋")]),s._v("，防止线程被系统挂起。")]),s._v(" "),t("li",[s._v("最后如果以上都失败就升级为"),t("strong",[s._v("重量级锁")]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"get-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-2"}},[s._v("#")]),s._v(" get")]),s._v(" "),t("ul",[t("li",[s._v("根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值")]),s._v(" "),t("li",[s._v("如果是红黑树那就按照树的方式获取值")]),s._v(" "),t("li",[s._v("就不满足那就按照链表的方式遍历获取值")])]),s._v(" "),t("h2",{attrs:{id:"_5-构造参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-构造参数"}},[s._v("#")]),s._v(" 5. 构造参数")]),s._v(" "),t("p",[t("strong",[s._v("依然是2的幂次方数")])]),s._v(" "),t("p",[s._v("如默认传入32")]),s._v(" "),t("ul",[t("li",[s._v("JDK-7，"),t("code",[s._v("capacity = 32")])]),s._v(" "),t("li",[s._v("JDK8，"),t("code",[s._v("capacity = 64")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617203840.png",alt:"image-20201004162936756"}})]),s._v(" "),t("h2",{attrs:{id:"_6-concurrenthashmap总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-concurrenthashmap总结"}},[s._v("#")]),s._v(" 6. ConcurrentHashMap总结")]),s._v(" "),t("p",[s._v("JDK-7版本的"),t("strong",[s._v("ReentrantLock + Segment + HashEntry")])]),s._v(" "),t("p",[s._v("JDK-8版本中"),t("strong",[s._v("synchronized + CAS + Node + 红黑树")])]),s._v(" "),t("p",[t("strong",[s._v("1. 数据结构")]),s._v("：取消了Segment分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。")]),s._v(" "),t("p",[t("strong",[s._v("2. 保证线程安全机制")]),s._v("：JDK1.7采用segment的分段锁机制实现线程安全，其中segment继承自ReentrantLock。JDK1.8采用CAS+Synchronized保证线程安全。")]),s._v(" "),t("p",[t("strong",[s._v("3. 锁的粒度")]),s._v("：原来是对需要进行数据操作的Segment加锁，现调整为对每个数组元素加锁（Node）。")]),s._v(" "),t("p",[t("strong",[s._v("4. 链表转化为红黑树")]),s._v(":定位结点的hash算法简化会带来弊端,Hash冲突加剧,因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。")]),s._v(" "),t("p",[t("strong",[s._v("5. 查询时间复杂度")]),s._v("：从原来的遍历链表O(n)，变成遍历红黑树O(logN)。")])])}),[],!1,null,null,null);t.default=e.exports}}]);