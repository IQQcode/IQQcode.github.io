(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{488:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-hashmap原理探究"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashmap原理探究"}},[s._v("#")]),s._v(" 1. HashMap原理探究")]),s._v(" "),a("blockquote",[a("p",[s._v("https://zhuanlan.zhihu.com/p/45430524")])]),s._v(" "),a("h3",{attrs:{id:"版本差别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本差别"}},[s._v("#")]),s._v(" 版本差别")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195858.png",alt:"image-20201004150748015"}})]),s._v(" "),a("p",[a("strong",[s._v("1. 底层结构")])]),s._v(" "),a("p",[s._v("JDK-7：数组 + 单向链表")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195902.jpg",alt:"preview"}})]),s._v(" "),a("p",[s._v("JDK8之 后：数组 + 单向链表 / 红黑树（链表的长度超过8）")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195906.jpg",alt:"preview"}})]),s._v(" "),a("p",[a("strong",[s._v("2. 扩容机制 - 发生hash冲突时")])]),s._v(" "),a("ul",[a("li",[s._v("在JDK-7，构造方法中创建一个一个长度是16的"),a("code",[s._v("Entry[] table")]),s._v("用来存储键值对数据的")]),s._v(" "),a("li",[s._v("在JDK8后，"),a("u",[s._v("不是在HashMap的构造方法底层创建数组了")]),s._v("，是在"),a("strong",[s._v("第一次调用")]),a("code",[s._v("put")]),s._v("方法时创建的数组，\n"),a("code",[s._v("Node[] table")]),s._v("用来存储键值对数据的")])]),s._v(" "),a("p",[a("strong",[s._v("3. 元素迁移")])]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("JDK7:")]),s._v(" 头插法。多线程下产生循环链表")])]),s._v(" "),a("li",[a("p",[s._v("**JDK8：**尾插法，先维护一个双向链表方便转红黑树。多线程下会存在元素覆盖问题，造成数据丢失")])])]),s._v(" "),a("h3",{attrs:{id:"底层探究"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层探究"}},[s._v("#")]),s._v(" 底层探究")]),s._v(" "),a("p",[a("code",[s._v("Node<K,V>[] table")]),s._v("就是HashMap核心的数据结构，也称之为“位桶数组”。")]),s._v(" "),a("p",[s._v("HashMap集合是一个无序的集合，不保证映射的顺序，存储元素和取出元素的顺序有可能不一致。")]),s._v(" "),a("p",[s._v("HashMap内部节点")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195911.png",alt:""}})]),s._v(" "),a("p",[s._v("一个节点类存储了：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("hash")]),s._v("：键对象的哈希值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("key")]),s._v("：键")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("value")]),s._v("：值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("next")]),s._v("：下一个节点的位置")])])]),s._v(" "),a("p",[s._v("每一个Node对象就是就是一个单链表结构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195915.png",alt:""}})]),s._v(" "),a("p",[s._v("然后，我们映射出"),a("code",[s._v("Node<K,V>[]")]),s._v("数组的结构（HashMap的结构）：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195918.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"_2-构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造方法"}},[s._v("#")]),s._v(" 2. 构造方法")]),s._v(" "),a("p",[a("strong",[s._v("【面试提问🎈】为什么我们建议在定义HashMap的时候，就指定它的初始化大小呢？")])]),s._v(" "),a("ul",[a("li",[s._v("在当我们对HashMap初始化时没有设置初始化容量，系统会默认创建一个容量为16的大小的集合。当HashMap的容量 超过了临界值(默认16*0.75=12)时，HashMap将会重新扩容到下一个2的指数幂（16->32）。HashMap扩容将要进行resize的操作，频繁resize，会导致降低性能。")])]),s._v(" "),a("h3",{attrs:{id:"初始容量的确定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始容量的确定"}},[s._v("#")]),s._v(" 初始容量的确定")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("不指定默认为16")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("指定容量18，寻找32")])])])]),s._v(" "),a("p",[s._v("HashMap 总是使用**2^n^**作为哈希表的大小，"),a("code",[s._v("tableSizeFor")]),s._v("方法保证了 HashMap 总是使用2的幂作为哈希表的大小，保证初始化容量"),a("code",[s._v("CAPACITY")]),s._v(" "),a("strong",[s._v("大于等于")]),s._v("其2^n^")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("先将"),a("code",[s._v("(CAPACITY - 1) * 2")]),s._v("  = "),a("code",[s._v("D_CAPACITY")])])]),s._v(" "),a("li",[a("p",[s._v("移位")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("|")]),s._v("运算")])])]),s._v(" "),a("p",[s._v("保留"),a("code",[s._v("D_CAPACITY")]),s._v("二进制的"),a("strong",[s._v("最高位")]),s._v("为"),a("code",[s._v("1")]),s._v("，其余后面为全为"),a("code",[s._v("0")]),s._v("，该数即为初始容量")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Returns a power of two size for the given target capacity.\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tableSizeFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAXIMUM_CAPACITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAXIMUM_CAPACITY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("以"),a("code",[s._v("18")]),s._v("为例进行演算")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("\n减一是防止"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的幂次方数扩容，传入"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("时变为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("    \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0110")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("       \ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("原始数二进制保留最高位，其余全变为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n    \n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("    \n【最终】\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("扩容很耗时，扩容的本质是定义新的更大的数组，并将原数组内容拷贝到新数组中")]),s._v(" "),a("hr"),s._v(" "),a("p",[a("strong",[s._v("存7个元素，初始容量设为几合适？")])]),s._v(" "),a("ul",[a("li",[s._v("10合适")])]),s._v(" "),a("p",[s._v("我们设置的默认值是7，经过JDK处理之后，HashMap的容量会被设置成8，但是，这个HashMap在元素个数达到 8*0.75 = 6的时候就会进行一次扩容")]),s._v(" "),a("p",[s._v("通过expectedSize / 0.75F + 1.0F计算，7/0.75 + 1 = 10 ,10经过JDK处理之后，会被设置成16，这就大大的减少了扩容的几率")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/h363659487/article/details/105706822",target:"_blank",rel:"noopener noreferrer"}},[s._v("HashMap初始化容量设置"),a("OutboundLink")],1)])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"为什么是2的幂次方数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是2的幂次方数"}},[s._v("#")]),s._v(" 为什么是2的幂次方数")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("只有当数组长度为2的幂次方时，"),a("code",[s._v("hash & (length-1)")]),s._v("才等价于"),a("code",[s._v("hash % length")]),s._v("，而"),a("code",[s._v("%")]),s._v("运算效率太低，使用位运算来实现key的定位")])]),s._v(" "),a("li",[a("strong",[s._v("2的幂次方可以减少"),a("code",[s._v("hash")]),s._v("冲突次数，提高HashMap的桶数组的利用效率；")])]),s._v(" "),a("li",[a("strong",[s._v("扩容后，原数组Node节点的角标迁移，保证只会出现在原来位置会加偏移量，不需要"),a("code",[s._v("rehash")]),s._v("提高效率")])])]),s._v(" "),a("blockquote",[a("p",[s._v("如果数组长度不是2的n次幂，容易发生hash碰撞，导致其余数组空间很大程度上并没有存储数据，链表或者红黑树过长，效率降低")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("如果是奇数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("长度为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00101001001001011111111111100111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000000000000000000000000100")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("长度"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("，参与hash运算的是"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n得到的结果永远是偶数，代表获取的角标永远是偶数，【数组浪费一半】"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("\n    \n如果是偶数，会出现丢失角标位，【部分角标永远没有值】\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("br"),s._v(" "),a("h2",{attrs:{id:"_2-添加put"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加put"}},[s._v("#")]),s._v(" 2. 添加put")]),s._v(" "),a("p",[a("strong",[s._v("put过程")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195925.jpeg",alt:"put"}})]),s._v(" "),a("p",[a("strong",[s._v("实现步骤大致如下：")])]),s._v(" "),a("ol",[a("li",[s._v("先通过"),a("code",[s._v("hash")]),s._v("值计算出"),a("strong",[s._v("key")]),s._v("映射到哪个桶；")]),s._v(" "),a("li",[s._v("如果桶上没有碰撞冲突，则直接插入；")]),s._v(" "),a("li",[s._v("如果出现碰撞冲突，则需要处理冲突：\n"),a("ul",[a("li",[s._v("如果该桶使用红黑树处理冲突，则调用红黑树的方法插入数据；")]),s._v(" "),a("li",[s._v("否则采用传统的链式方法插入。如果链的长度达到临界值，则把链转变为红黑树；")])])]),s._v(" "),a("li",[s._v("如果桶中存在重复的键，则为该键替换新值"),a("code",[s._v("value")]),s._v("；")]),s._v(" "),a("li",[s._v("如果"),a("code",[s._v("size")]),s._v("大于國值"),a("code",[s._v("threshold")]),s._v("，则进行扩容；")])]),s._v(" "),a("p",[a("code",[s._v("put")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("putVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("hr"),s._v(" "),a("h3",{attrs:{id:"hash算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash算法"}},[s._v("#")]),s._v(" Hash算法")]),s._v(" "),a("p",[a("strong",[s._v("【提问】：HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？")])]),s._v(" "),a("ul",[a("li",[s._v("hashCode产生的"),a("code",[s._v("hash")]),s._v("值太大，与数组长度不匹配")]),s._v(" "),a("li",[s._v("HashMap自己实现了自己的"),a("code",[s._v("hash()")]),s._v("方法，通过两次扰动使得它自己的哈希值高低位自行进行"),a("code",[s._v("^")]),s._v("运算，"),a("u",[s._v("降低哈希碰撞概率使得数据分布更平均")]),s._v("；")])]),s._v(" "),a("p",[a("strong",[s._v("还可以采用：")])]),s._v(" "),a("ul",[a("li",[s._v("平方取中法")]),s._v(" "),a("li",[s._v("取余数")]),s._v(" "),a("li",[s._v("伪随机数法")])]),s._v(" "),a("br"),s._v(" "),a("h3",{attrs:{id:"确定桶数组的挂载点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确定桶数组的挂载点"}},[s._v("#")]),s._v(" 确定桶数组的挂载点")]),s._v(" "),a("p",[a("strong",[s._v("【面试提问】：哈希表层釆用何种算法计算hash值？还有哪些算法可以计算出hash值？")])]),s._v(" "),a("p",[s._v("底层采用的"),a("strong",[s._v("key")]),s._v("的hashCode方法的值，结合数组长度进行无符号右移"),a("code",[s._v(">>>16")]),s._v("、按位异或"),a("code",[s._v("^")]),s._v("、按位与"),a("code",[s._v("&")]),s._v("，计算出索引")]),s._v(" "),a("p",[a("strong",[s._v("根据key求index的过程")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先用key求得hash值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 利用上述函数求取hash值后 然后（n-1）& hash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nindex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"jdk-8-hash算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8-hash算法"}},[s._v("#")]),s._v(" JDK-8 Hash算法")]),s._v(" "),a("blockquote",[a("p",[s._v("桶数组长度为 n")])]),s._v(" "),a("ol",[a("li",[s._v("Object类生成key的hashCode"),a("code",[s._v("h")])]),s._v(" "),a("li",[a("code",[s._v("hash = h ^ (h >>> 16)")])]),s._v(" "),a("li",[a("code",[s._v("hash & (n - 1)")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195931.png",alt:"image-20201004180824392"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195936.png",alt:"image-20200822120845788"}})]),s._v(" "),a("p",[a("code",[s._v("hash = hashcode ^ (hashcode >>> 16)")]),s._v("，让低16位同时包含了高位和低位的信息，在计算下标时，"),a("strong",[s._v("由于高位和低位的同时参与，减少hash的碰撞")])]),s._v(" "),a("p",[a("code",[s._v("hash & (n - 1)")]),s._v("：n - 1 使得低位全为1，高位全为0，位与之后的结果一定在0 ---\x3e n-1范围内")]),s._v(" "),a("br"),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"存入过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存入过程"}},[s._v("#")]),s._v(" 存入过程")]),s._v(" "),a("p",[s._v("我们的目的是将"),a("code",[s._v("key-value")]),s._v("两个对象"),a("strong",[s._v("成对")]),s._v("存放到 HashMap的Node数组中。"),a("strong",[s._v("核心就是产生hash值，该值用来对应数组的存储位置")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195942.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("第一步：获取Key对象的hashCode")])]),s._v(" "),a("p",[s._v("调用key对象的"),a("code",[s._v("hashCode")]),s._v("方法，获得哈希码")]),s._v(" "),a("blockquote",[a("p",[s._v("hashCode是Object类中的对象，所以任何类对象都可以调用")])]),s._v(" "),a("p",[a("strong",[s._v("第二步：计算hsah值")])]),s._v(" "),a("p",[s._v("根据hashCode计算出"),a("code",[s._v("hash")]),s._v("值（要求在 [0 ， 数组长度-1] 之间）")]),s._v(" "),a("p",[s._v("hashCode是一个整数，我们需要将它转化成 [0 ， 数组长度-1] 的范围。我们要求转化后的hash值尽量均匀地分布在 [0 ， 数组长度-1] 这个区间，减少"),a("strong",[s._v("hash冲突")])]),s._v(" "),a("blockquote",[a("p",[s._v("hash(哈希)冲突：不同的hashCode转换为hash值时计算出的结果相同")])]),s._v(" "),a("p",[a("strong",[s._v("【hash值的计算】")])]),s._v(" "),a("p",[s._v("I. 极端情况")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  hashCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" hashCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("hash值总是1。意味着，键值对对象都会存储到数组索引"),a("code",[s._v("1")]),s._v("位置，这样就形成一个非常长的链表。相当于每存储一个对象都会发生“hash冲突”， HashMap也退化成了一个“链表”。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195946.png",alt:""}})]),s._v(" "),a("p",[s._v("hash值都不相同，退化为长度为N的数组。此时hash成为了数组下标")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195949.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("所以，我们必须采用折中的算法，让数组的容量不能太大，让链表的长度不能太长。让存储在哈希表中的数据尽量散开均匀分布，提高查询速度。")])]),s._v(" "),a("p",[s._v("—种简单和常用的算法是"),a("strong",[s._v("相除取余算法")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("hash值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" 数组长度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这种算法可以让hash值均匀的分布在 [0 ， 数组长度-1] 的区间。早期的Hashtable就是采用这种算法。但是，这种算法由于使用了“除法″，效率低下。")]),s._v(" "),a("p",[s._v("JDK后来改进了算法。首先约定数组长度必须为2的整数幂，这样采用位运算可实现取余的效果：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("hash值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hashCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("数组长度 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("第三步：生成Node对象")])]),s._v(" "),a("p",[s._v("一个Node对象包含4部分：key对象、 value对象、hash值、指向下一个Node对象的引用。")]),s._v(" "),a("p",[s._v("我们现在算出了hash值，下一个 Entry对象的引用为null")]),s._v(" "),a("p",[a("strong",[s._v("第四步：将Node对象放到table数组中")])]),s._v(" "),a("ul",[a("li",[s._v("如果本Node对象对应的数组索引位置还没有放Node对象，则直接将Node对象存储进数组；")]),s._v(" "),a("li",[s._v("如果对应索引位置已经有Node对象，则将已有Node对象的next指向本Node对象，形成链表")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"链表插入元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表插入元素"}},[s._v("#")]),s._v(" 链表插入元素")]),s._v(" "),a("p",[s._v("插入：如果"),a("code",[s._v("key")]),s._v("相同，"),a("code",[s._v("value")]),s._v("会"),a("u",[s._v("覆盖")]),s._v("为最新")]),s._v(" "),a("p",[a("strong",[s._v("JDK7")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("数组 + 链表")])]),s._v(" "),a("li",[a("p",[s._v("头插法")])])]),s._v(" "),a("p",[s._v("【头插法的原因】")]),s._v(" "),a("ol",[a("li",[s._v("头插法相对于尾插法，遍历链表的长度平均来说较短，每次不一定全部遍历")]),s._v(" "),a("li",[s._v("根据时间局部性原理，最近插入的最有可能被使用")])]),s._v(" "),a("p",[a("strong",[s._v("JDK8")])]),s._v(" "),a("ul",[a("li",[s._v("数组 + 链表 / 红黑树")]),s._v(" "),a("li",[s._v("尾插法")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"解决hash碰撞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决hash碰撞"}},[s._v("#")]),s._v(" 解决hash碰撞")]),s._v(" "),a("p",[s._v("当添加一个元素"),a("code",[s._v("key-value")]),s._v("时，首先计算"),a("code",[s._v("key")]),s._v("的hash值，以此确定插入数组中的位置。但是可能存在同hash值的元素已经被放在数组同一位置了，这时就添加到同一hash值的元素的后面，他们在数组的同一位置，就形成了链表。")]),s._v(" "),a("p",[s._v("同一个链表上的hash值是相同的，所以说数组存放的是链表。")]),s._v(" "),a("p",[s._v("JDK8及之后，当"),a("strong",[s._v("链表长度大于8时，并且数组长度大于64")]),s._v("（二者必须同时满足）链表就转换为红黑树，这样又大大提高了查找的效率")]),s._v(" "),a("p",[s._v("链表长度小于"),a("code",[s._v("6")]),s._v("时，会再次退化为链表")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617195955.png",alt:""}})]),s._v(" "),a("p",[s._v("查询复杂度：")]),s._v(" "),a("ul",[a("li",[s._v("链表"),a("code",[s._v("O(n)")])]),s._v(" "),a("li",[s._v("红黑树"),a("code",[s._v("O(log n)")])])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"转化的阈值为什么为8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转化的阈值为什么为8"}},[s._v("#")]),s._v(" 转化的阈值为什么为8")]),s._v(" "),a("p",[s._v("根据统计学"),a("strong",[s._v("Poisson-泊松分布")]),s._v("规律，一个桶中链表长度"),a("strong",[s._v("大于")]),s._v("8个元素的概率为"),a("code",[s._v("0.0000006")]),s._v("，几乎为不可能事件。"),a("strong",[s._v("权衡空间和事件选择阈值为8")])]),s._v(" "),a("p",[a("strong",[s._v("【自己的理解】")])]),s._v(" "),a("p",[s._v("红黑树的平均查找长度是"),a("code",[s._v("log(n)")])]),s._v(" "),a("ul",[a("li",[s._v("如果长度为8，平均查找长度为"),a("code",[s._v("log(8)=3")]),s._v("；链表的平均查找长度为"),a("code",[s._v("n / 2")]),s._v("，当长度为8时，平均查找长度为"),a("code",[s._v("8/2=4")]),s._v("，这才有转换成树的必要；")]),s._v(" "),a("li",[s._v("链表长度如果是小于等于6，"),a("code",[s._v("6/2=3")]),s._v("，而"),a("code",[s._v("log(6)=2.6")]),s._v("，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短")])]),s._v(" "),a("br"),s._v(" "),a("h3",{attrs:{id:"转化为红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转化为红黑树"}},[s._v("#")]),s._v(" 转化为红黑树")]),s._v(" "),a("p",[s._v("先将链表迁移为"),a("strong",[s._v("双向链表")]),s._v("，双向链表再树化"),a("code",[s._v("treeify")])]),s._v(" "),a("ul",[a("li",[s._v("双向链表是为了简化红黑树的操作")])]),s._v(" "),a("p",[a("strong",[s._v("链表长度大于8时，并且数组长度大于64")])]),s._v(" "),a("p",[a("strong",[s._v("小于数组长度64时，要2倍 resize()扩容")])]),s._v(" "),a("p",[a("img",{attrs:{src:"b-HashMap.assets/image-20200829161900821.png",alt:"image-20200829161900821"}})]),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"_3-取出数据get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-取出数据get"}},[s._v("#")]),s._v(" 3.取出数据get")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//test")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们需要通过key对象获得“键值对”对象，进而返回value对象。明白了存储数据过程，取数据就比较简单了，参见以下步骤：")]),s._v(" "),a("p",[a("strong",[s._v("第一步：获取Key对象的hashCode")])]),s._v(" "),a("p",[s._v("同存储数据一样，获取数据也要先计算hash值。获得key的hashcode，通过Hash散列算法得到hash值，进而定位到数组的位置")]),s._v(" "),a("p",[a("strong",[s._v("第二步：遍历链表/红黑树")])]),s._v(" "),a("p",[s._v("遍历相同hash的链表，在链表上挨个比较Key对象。调用"),a("code",[s._v("equals")]),s._v("方法，将Key对象和链表上所有节点的Key对象进行比较，直到碰到返回true的节点对象为止。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("先计算hash值定位到存储数据的链表")])]),s._v(" "),a("li",[a("p",[s._v("遍历链表，通过"),a("code",[s._v("equaks")]),s._v("来确定Key对象，查找到链表上对应的节点")])]),s._v(" "),a("li",[a("p",[s._v("返回该节点的"),a("code",[s._v("Value")]),s._v("值")])])]),s._v(" "),a("p",[a("strong",[s._v("【hashCode和equals方法的关系】")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("equals相同，hashCode一定相同，hash值一定相同；（在同一个链表上）")])]),s._v(" "),a("li",[a("p",[s._v("hashCode相同，equals不一定相同；（hash冲突）")])])]),s._v(" "),a("p",[a("strong",[s._v("总结")])]),s._v(" "),a("p",[s._v("不管是存储数据还是取出数据，都必须先计算hash值，根据哈希值来确定数据在Node[]数组上存放/取出的位置")]),s._v(" "),a("h2",{attrs:{id:"_4-扩容resize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-扩容resize"}},[s._v("#")]),s._v(" 4. 扩容resize")]),s._v(" "),a("p",[a("strong",[s._v("扩容的目的：")]),s._v(" 在达到阈值时，扩容是为了缩短链表/红黑树，散开hash，提高查询效率")]),s._v(" "),a("p",[s._v("HashMap的位桶数组，初始大小为16，若指定容量则寻找最接近的大于等源指定值的"),a("strong",[s._v("2的幂次方数")]),s._v("。实际使用时，显然大小是可变的。如果位桶数组中的元素达到"),a("strong",[s._v("阈值")]),a("code",[s._v("0.75 * arr.length")]),s._v("，就重新调整数组大小变为原来的"),a("code",[s._v("2")]),s._v("倍大小")]),s._v(" "),a("ul",[a("li",[s._v("16为初始容量")]),s._v(" "),a("li",[s._v("0.75为加载因子")])]),s._v(" "),a("h3",{attrs:{id:"加载因子loadfactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载因子loadfactor"}},[s._v("#")]),s._v(" 加载因子loadFactor")]),s._v(" "),a("p",[a("strong",[s._v("loadFactor怎么计算")])]),s._v(" "),a("ul",[a("li",[s._v("存储的元素个数"),a("code",[s._v("size")])]),s._v(" "),a("li",[s._v("桶数组的长度"),a("code",[s._v("capacity")])])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("loadFactor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" capacity\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("加载因子为什么为"),a("code",[s._v("0.75")]),s._v("?")])]),s._v(" "),a("p",[s._v("根据泊松分布统计学规律，"),a("strong",[s._v("兼顾了")]),s._v("桶数组的利用率又避免的链表节点太多")]),s._v(" "),a("ul",[a("li",[s._v("大于"),a("code",[s._v("0.75")]),s._v("：链表挂载的节点太多")]),s._v(" "),a("li",[s._v("小于"),a("code",[s._v("0.75")]),s._v("：数组使用率低")])]),s._v(" "),a("h3",{attrs:{id:"位桶数组2倍扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位桶数组2倍扩容"}},[s._v("#")]),s._v(" 位桶数组2倍扩容")]),s._v(" "),a("p",[s._v("如果位桶数组中的元素达到"),a("strong",[s._v("阈值")]),a("code",[s._v("0.75 * arr.length")]),s._v("，就重新调整数组大小变为原来的"),a("code",[s._v("2")]),s._v("倍大小")]),s._v(" "),a("ul",[a("li",[s._v("16为初始容量")]),s._v(" "),a("li",[s._v("0.75为加载因子")]),s._v(" "),a("li",[s._v("创建新数组，2倍扩容，浅拷贝原数组")])]),s._v(" "),a("p",[s._v("HashMap在进行扩容时，"),a("strong",[s._v("不需要重新计算hash值")]),s._v("。"),a("code",[s._v("rehash")]),s._v("方式非常巧妙，因为每次扩容都是翻倍，与原来计算的"),a("code",[s._v("(n-1)&hash")]),s._v("结果相比，只是多了一个bit位，所以节点要么就在"),a("strong",[s._v("原来")]),s._v("的位置，要么就被分配到"),a("strong",[s._v("原位置+旧容量")]),s._v("这个位置")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617200001.png",alt:""}})]),s._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"red"}},[s._v("【注意】：")])],1)]),s._v(" "),a("ul",[a("li",[a("p",[s._v("扩容并不是直接将数组对应"),a("code",[s._v("hash")]),s._v("下的链表直接复制，而是节点逐个移动，"),a("em",[s._v("重新计算Hash值")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("扩容达到缩短链表，散开hash，提高查询效率")]),s._v("的效果")])])]),s._v(" "),a("h3",{attrs:{id:"jdk7多线程扩容下出现的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk7多线程扩容下出现的问题"}},[s._v("#")]),s._v(" JDK7多线程扩容下出现的问题")]),s._v(" "),a("p",[s._v("在位桶数组扩容后，数组对应"),a("code",[s._v("hash")]),s._v("下的链表"),a("code",[s._v("next")]),s._v("指针可能会出现环，循环链表造成死循环")]),s._v(" "),a("p",[s._v("【原因】：")]),s._v(" "),a("ul",[a("li",[s._v("JDK7扩容采用头插法，导致数据-移动到扩容后的数组顺序发生变化")])]),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"_5-删除remove"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-删除remove"}},[s._v("#")]),s._v(" 5. 删除remove")]),s._v(" "),a("ul",[a("li",[s._v("若为树，查找为"),a("code",[s._v("O(logn)")])]),s._v(" "),a("li",[s._v("若为链表，查找为"),a("code",[s._v("O(n)")])])]),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"_6-并发问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-并发问题"}},[s._v("#")]),s._v(" 6. 并发问题")]),s._v(" "),a("h3",{attrs:{id:"问题复现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题复现"}},[s._v("#")]),s._v(" 问题复现")]),s._v(" "),a("ul",[a("li",[s._v("一边遍历"),a("code",[s._v("map")]),s._v("，一边修改"),a("code",[s._v("map")]),s._v("，出现"),a("code",[s._v("ConcurrentModificationException")])])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//remove"2"或“3”都会出现 ConcurrentModificationException')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("keySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("blockquote",[a("p",[s._v("此问题在JDK7、JDK8都会出现")])]),s._v(" "),a("h3",{attrs:{id:"原因分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原因分析"}},[s._v("#")]),s._v(" 原因分析")]),s._v(" "),a("p",[a("strong",[s._v("读写同步，导致出现并发修改的异常")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("modCount")]),s._v("计数器记录修改次数")])]),s._v(" "),a("p",[a("strong",[s._v("1. 先put添加元素")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210617203805.png",alt:"image-20200812113917473"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("每当调用一次"),a("code",[s._v("put")]),s._v("或者"),a("code",[s._v("remove")]),s._v("等做修改时，"),a("code",[s._v("modCount++")]),s._v("，此时"),a("code",[s._v("modCount == 2")])])]),s._v(" "),a("li",[a("p",[s._v("遍历"),a("code",[s._v("map")]),s._v("时会返回"),a("code",[s._v("KeySet")]),s._v("的迭代器，构造方法初始化"),a("code",[s._v("expectedModCount = modCount")]),s._v("等于2")])])]),s._v(" "),a("p",[a("strong",[s._v("2. 遍历，判断remove")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("调用"),a("code",[s._v("map")]),s._v("的"),a("code",[s._v("remove()")]),s._v("，"),a("code",[s._v("modCount++")]),s._v("，"),a("code",[s._v("modCount=3")])])]),s._v(" "),a("li",[a("p",[s._v("此时"),a("code",[s._v("expectedModCount")]),s._v("没做更新，依然为2，二者不相等")])]),s._v(" "),a("li",[a("p",[s._v("因为"),a("code",[s._v("expectedModCount")]),s._v("只在初始化迭代器时，构造方法做了赋值")])])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("modCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" expectedModCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    theow "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentModificationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("mark",[s._v("故抛出异常")])]),s._v(" "),a("h3",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[s._v("#")]),s._v(" 解决方法")]),s._v(" "),a("h4",{attrs:{id:"使用concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用concurrenthashmap"}},[s._v("#")]),s._v(" 使用ConcurrentHashMap")]),s._v(" "),a("p",[s._v("ConcurrentHashMap保证了安全性")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConcurrentHashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_7-jdk7多线程下扩容产生循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-jdk7多线程下扩容产生循环链表"}},[s._v("#")]),s._v(" 7. JDK7多线程下扩容产生循环链表")]),s._v(" "),a("blockquote",[a("p",[s._v("究其原因，是因为在多线程环境下使用了非线程安全的Map集合")])]),s._v(" "),a("p",[a("strong",[s._v("【JDK-7成环】")])]),s._v(" "),a("p",[a("strong",[s._v("transfer函数：")]),s._v(" 扩容后的元素迁移")]),s._v(" "),a("p",[s._v("**transfer()**方法"),a("code",[s._v("newTable[i] = e")]),s._v("处，线程1完成元素迁移，线程2在执行时链表尾结点又指向了头结点("),a("strong",[s._v("头插")]),s._v(")，产生循环链表")]),s._v(" "),a("p",[s._v("HashMap之所以在并发下的扩容造成死循环，是因为，多个线程并发进行时，因为一个线程先期完成了扩容，将原的链表重新散列到自己的表中，并且链表变成了倒序，后一个线程再扩容时，又进行自己的散列，再次将倒序链表变为正序链表。于是形成了一个环形链表，当表中不存在的元素时，造成死循环。")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/132834837",target:"_blank",rel:"noopener noreferrer"}},[s._v('HashMap中的"致命错误"：循环链表'),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/a105a7917d6f",target:"_blank",rel:"noopener noreferrer"}},[s._v("1.7中HashMap死循环分析"),a("OutboundLink")],1)])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("strong",[s._v("JDK 7")])]),s._v("的头插法，在多线程场景下会产生"),a("strong",[s._v("循环链表")]),s._v("，最终出现OOM")],1),s._v(" "),a("p",[a("strong",[s._v("【JDK-8扩容丢失】")])]),s._v(" "),a("p",[s._v("**JDK 8 **改为了"),a("code",[s._v("尾插 / 红黑树")]),s._v("，不会出现循环链表")]),s._v(" "),a("p",[s._v("JDK8 虽然将扩容给为尾插，但仍不能够安全扩容，会出现"),a("strong",[s._v("扩容丢数据")]),s._v("的问题，即"),a("strong",[s._v("角标元素覆盖")])])])}),[],!1,null,null,null);a.default=e.exports}}]);