(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{480:function(t,s,n){"use strict";n.r(s);var r=n(3),a=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("String 字符串常量")])]),t._v(" "),s("p",[s("strong",[t._v("StringBuffer 字符串变量（线程安全）")])]),t._v(" "),s("p",[s("strong",[t._v("StringBuilder 字符串变量（非线程安全）")])]),t._v(" "),s("p",[t._v("简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，速度是一定会相当慢的。")]),t._v(" "),s("p",[t._v("而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下，String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：")]),t._v(" "),s("p",[s("code",[t._v("String S1 = “This is only a” + “ simple” + “ test”;")])]),t._v(" "),s("p",[s("code",[t._v("StringBuffer Sb = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);")])]),t._v(" "),s("p",[t._v("你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。")]),t._v(" "),s("p",[t._v("其实这是 JVM 的一个把戏，在 JVM 眼里，这个"),s("code",[t._v("String S1 = “This is only a” + “ simple” + “test”;")]),t._v(" 其实就是：")]),t._v(" "),s("p",[s("code",[t._v("String S1 = “This is only a simple test”;")]),t._v("所以当然不需要太多的时间了。")]),t._v(" "),s("p",[t._v("但这里要注意的是，如果你的字符串是来自另外的 String 对象的话，速度就没那么快了，譬如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("This")]),t._v(" is only a”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “ simple”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “ test”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这时候 JVM 会规规矩矩的按照原来的方式去做")]),t._v(" "),s("p",[t._v("在大部分情况下 "),s("strong",[t._v("StringBuffer > String")])]),t._v(" "),s("p",[s("strong",[t._v("StringBuffer")])]),t._v(" "),s("p",[t._v("Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。")]),t._v(" "),s("p",[t._v("可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。")]),t._v(" "),s("p",[t._v("StringBuffer 上的主要操作是 "),s("code",[t._v("append")]),t._v("和"),s("code",[t._v("insert")]),t._v(" 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。")]),t._v(" "),s("p",[t._v("append 方法始终将这些字符添加到缓冲区的末端；")]),t._v(" "),s("p",[t._v("而insert 方法则在指定的点添加字符.")]),t._v(" "),s("p",[t._v("例如:")]),t._v(" "),s("p",[t._v("如果 str 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 "),s("code",[t._v('str.append("LE")')]),t._v(" 会使字符串缓冲区含"),s("code",[t._v("“startLE”")])]),t._v(" "),s("p",[t._v('而 str.insert(4, "LE") 将更改字符串缓冲区，使之包含“starlet”')]),t._v(" "),s("p",[t._v("在大部分情况下 StringBuilder > StringBuffer")]),t._v(" "),s("p",[s("strong",[t._v("java.lang.StringBuilder")])]),t._v(" "),s("p",[t._v("java.lang.StringBuilder一个可变的字符序列是JDK1.5新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。")])])}),[],!1,null,null,null);s.default=a.exports}}]);