(window.webpackJsonp=window.webpackJsonp||[]).push([[393],{715:function(t,_,s){"use strict";s.r(_);var a=s(3),v=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-平衡树简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-平衡树简介"}},[t._v("#")]),t._v(" 1. 平衡树简介")]),t._v(" "),_("p",[t._v("之前我们学习过二叉查找树，发现它的查询效率比单纯的链表和数组的查询效率要高很多，大部分情况下，确实是这样的，但在最坏情况下，二叉查找树可能会退化为链表：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194156.png",alt:"image-20200815094205233"}})]),t._v(" "),_("p",[t._v("我们会发现，如果我们要查找"),_("code",[t._v("1")]),t._v("这个元素，查找的效率依旧会很低。效率低的原因在于这个"),_("strong",[t._v("树不平衡")]),t._v("，全部是向\n左边分支。如果我们有一种方法，能够不受插入数据的影响，让生成的树都像完全二叉树那样，那么即使在最坏情\n况下，查找的效率依旧会很好。")]),t._v(" "),_("h3",{attrs:{id:"_1-1-平衡树定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-平衡树定义"}},[t._v("#")]),t._v(" 1.1 平衡树定义")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=7498523&ss_c=ssc.citiao.link",target:"_blank",rel:"noopener noreferrer"}},[t._v("平衡二叉树"),_("OutboundLink")],1),t._v("（BalancedBinaryTree）具有以下性质：")]),t._v(" "),_("p",[t._v("它是一棵空树或它的左右两个子树的高度差的"),_("a",{attrs:{href:"https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=844985&ss_c=ssc.citiao.link",target:"_blank",rel:"noopener noreferrer"}},[t._v("绝对值"),_("OutboundLink")],1),t._v("不超过"),_("code",[t._v("1")]),t._v("，并且左右两个子树都是一棵平衡二叉树(AVL)")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194216.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"_1-2-平衡树分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-平衡树分类"}},[t._v("#")]),t._v(" 1.2 平衡树分类")]),t._v(" "),_("ul",[_("li",[t._v("AVL树："),_("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("自平衡二叉查找树"),_("OutboundLink")],1),t._v("，最坏复杂度都是"),_("code",[t._v("O(log n)")])]),t._v(" "),_("li",[_("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("2-3树")])]),t._v(" "),_("h3",{attrs:{id:"_1-3-红黑树和avl树简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-红黑树和avl树简介"}},[t._v("#")]),t._v(" 1.3 红黑树和AVL树简介")]),t._v(" "),_("h4",{attrs:{id:"平衡二叉树-avl树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树-avl树"}},[t._v("#")]),t._v(" 平衡二叉树（AVL树）")]),t._v(" "),_("p",[t._v("平衡二叉树又称为AVL树，是一种特殊的"),_("strong",[t._v("二叉排序树")]),t._v("。其左右子树都是平衡二叉树，且左右子树高度之差的绝对值不超过"),_("code",[t._v("1")]),t._v("。将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子"),_("code",[t._v("BF")]),t._v("，那么平衡二叉树上的所有结点的平衡因子只可能是"),_("code",[t._v("-1")]),t._v("、"),_("code",[t._v("0")]),t._v("和"),_("code",[t._v("1")]),t._v("。只要二叉树上有一个结点的平衡因子的绝对值大于"),_("code",[t._v("1")]),t._v("，则该二叉树就是不平衡的。")]),t._v(" "),_("p",[_("strong",[t._v("【应用】")])]),t._v(" "),_("ul",[_("li",[t._v("搜索操作较多的情况下，二叉查找树实现")]),t._v(" "),_("li",[t._v("由于要保持严格平衡，插入、删除操作较为耗时")])]),t._v(" "),_("h4",{attrs:{id:"红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),_("p",[t._v("红黑树是一种"),_("strong",[t._v("二叉查找树")]),t._v("，但在每个节点增加一个存储位表示节点的颜色，可以是红或黑（非红即黑）。通过对任何一条从根到叶子的路径上各个==节点着色==的方式的限制，"),_("strong",[t._v("红黑树确保没有一条路径会比其它路径长出两倍")]),t._v("，因此，红黑树是一种弱平衡二叉树，相对于要求严格的AVL树来说，它的旋转次数少。")]),t._v(" "),_("p",[_("strong",[t._v("【应用】")])]),t._v(" "),_("ul",[_("li",[t._v("搜索，插入，删除操作较多的情况下")])]),t._v(" "),_("h4",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("红黑树和AVL树类似，都是在进行插入和删除时通过特定操作"),_("strong",[t._v("保持二叉查找树的平衡")]),t._v("，从而获得较高的查找性能")])]),t._v(" "),_("li",[_("p",[t._v("红黑树和AVL树的区别在于它使用颜色来标识结点的高度，是局部平衡而不是AVL树中的非常严格的平衡")])]),t._v(" "),_("li",[_("p",[t._v("红黑树对于任何不平衡都会在==三次== 旋转之内解决")])]),t._v(" "),_("li",[_("p",[t._v("红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高")])])]),t._v(" "),_("h3",{attrs:{id:"_1-4-avl树-vs-红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-avl树-vs-红黑树"}},[t._v("#")]),t._v(" 1.4 AVL树 vs 红黑树")]),t._v(" "),_("p",[t._v("**平衡性：**左右子树高度之差的绝对值不超过"),_("code",[t._v("1")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("平衡二叉树类型")]),t._v(" "),_("th",[t._v("平衡度")]),t._v(" "),_("th",[t._v("调整频率")]),t._v(" "),_("th",[t._v("适用场景")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("AVL树")]),t._v(" "),_("td",[t._v("高")]),t._v(" "),_("td",[t._v("高")]),t._v(" "),_("td",[t._v("查询多，增/删少。Windows NT内核")])]),t._v(" "),_("tr",[_("td",[t._v("红黑树")]),t._v(" "),_("td",[t._v("低")]),t._v(" "),_("td",[t._v("低")]),t._v(" "),_("td",[t._v("增/删频繁。C++的STL")])])])]),t._v(" "),_("ul",[_("li",[t._v("AVL树是"),_("strong",[t._v("严格")]),t._v("的平衡二叉搜索树，平衡条件必须满足所有节点的左右子树高度差不超过"),_("code",[t._v("1")])]),t._v(" "),_("li",[t._v("红黑树是一种"),_("strong",[t._v("弱")]),t._v("平衡二叉搜索树（红黑树确保没有一条路径比其它路径长出两倍，平衡因子为"),_("code",[t._v("<=2")]),t._v("），在相同的节点情况下，AVL树的高度低于红黑树")])]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_2-2-3查找树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3查找树"}},[t._v("#")]),t._v(" 2. 2-3查找树")]),t._v(" "),_("h3",{attrs:{id:"_2-3查找树的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3查找树的定义"}},[t._v("#")]),t._v(" 2-3查找树的定义")]),t._v(" "),_("p",[_("strong",[t._v("2-3查找树是一种绝对平衡的树，任意叶子节点到根节点路径一定相同")])]),t._v(" "),_("p",[_("strong",[t._v("2-结点")]),t._v("：含有一个键(及其对应的值)和两条链，左链接指向2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点")]),t._v(" "),_("p",[_("strong",[t._v("3-结点")]),t._v("：含有两个键(及其对应的值)和三条链，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194423.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"查找"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),_("p",[t._v("要判断一个键是否在树中：")]),t._v(" "),_("ul",[_("li",[t._v("先将它和"),_("strong",[t._v("其根结点中的键")]),t._v("比较。如果它和其中任意一个相等，查找命中；")]),t._v(" "),_("li",[t._v("否则就根据比较的结果找到指向相应区间的连接，并在其指向的子树中递归地继续查找")]),t._v(" "),_("li",[t._v("如果这个是空链接，查找未命中")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194427.png",alt:"image-20200815093102516"}})]),t._v(" "),_("h3",{attrs:{id:"插入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("#")]),t._v(" 插入")]),t._v(" "),_("h4",{attrs:{id:"向2-结点中插入新键"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向2-结点中插入新键"}},[t._v("#")]),t._v(" 向2-结点中插入新键")]),t._v(" "),_("p",[t._v("往2-3树中插入元素【关键步骤是节点融合】：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("首先要进行查找，然后将节点挂到未找到的节点上。2-3树之所以能够保证在最差的情况下的效率的原因在于其"),_("strong",[t._v("插入之后仍然能够保持平衡状态")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("如果查找后未找到的节点是一个2-结点，那么很容易，我们只需要将新的元素放到这个2-结点里面使其变成一个3-结点即可。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194432.png",alt:"image-20200815093154180"}})]),t._v(" "),_("h4",{attrs:{id:"向一棵只含有一个3-结点的树中插入新键"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向一棵只含有一个3-结点的树中插入新键"}},[t._v("#")]),t._v(" 向一棵只含有一个3-结点的树中插入新键")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("假设2-3树只包含一个3-结点，这个结点有两个键，没有空间来插入第三个键了，最自然的方式是我们假设这个结\n点能存放三个元素，暂时使其变成一个4-结点，同时他包含四条链接。")])]),t._v(" "),_("li",[_("p",[t._v("然后，我们将这个4-结点的中间元素提升，左边的键作为其左子结点，右边的键作为其右子结点。")])]),t._v(" "),_("li",[_("p",[t._v("插入完成，变为平衡2-3查找树，树的高度从0变为1。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194437.png",alt:"image-20200815093214511"}})]),t._v(" "),_("h4",{attrs:{id:"向一个父结点为2-结点的3-结点中插入新键"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向一个父结点为2-结点的3-结点中插入新键"}},[t._v("#")]),t._v(" 向一个父结点为2-结点的3-结点中插入新键")]),t._v(" "),_("ul",[_("li",[t._v("和上面的情况一样一样，我们也可以将新的元素插入到3-结点中，使其成为一个临时的4-结点")]),t._v(" "),_("li",[t._v("然后，将该结点中的中间元素提升到父结点即2-结点中，使其父结点成为一个3-结点")]),t._v(" "),_("li",[t._v("然后将左右结点分别挂在这个3-结点的恰当位置。")])]),t._v(" "),_("p",[_("strong",[t._v("【情况一：插入到3-节点中间】")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626194441.png",alt:"image-20200815093242357"}})]),t._v(" "),_("p",[_("strong",[t._v("【情况二：插入到3-节点两侧】")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("12")]),t._v("节点自动融合，保证绝对平衡")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195318.png",alt:""}})]),t._v(" "),_("h4",{attrs:{id:"向一个父结点为3-结点的3-结点中插入新键"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向一个父结点为3-结点的3-结点中插入新键"}},[t._v("#")]),t._v(" 向一个父结点为3-结点的3-结点中插入新键")]),t._v(" "),_("ul",[_("li",[t._v("当我们插入的结点是3-结点的时候，我们将该结点拆分，中间元素提升至父结点，但是此时父结点是一个3-结点，插入之后，父结点变成了4-结点")]),t._v(" "),_("li",[t._v("然后继续将中间元素提升至其父结点，直至遇到一个父结点是2-结点")]),t._v(" "),_("li",[t._v("然后将其变为3-结点，不需要继续进行拆分。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195324.png",alt:"image-20200815093307232"}})]),t._v(" "),_("h4",{attrs:{id:"分解根结点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分解根结点"}},[t._v("#")]),t._v(" 分解根结点")]),t._v(" "),_("ul",[_("li",[t._v("当插入结点到根结点的路径上全部是3-结点的时候，最终我们的根结点会变成一个临时的4-结点")]),t._v(" "),_("li",[t._v("此时，就需要将根结点拆分为两个2-结点，树的高度加1")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195329.png",alt:"image-20200815093334098"}})]),t._v(" "),_("h3",{attrs:{id:"插入总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插入总结"}},[t._v("#")]),t._v(" 插入总结")]),t._v(" "),_("p",[t._v("给定根节点为"),_("code",[t._v("42")]),t._v("，依次向二叉树中插入[37、18、12、11、6、5]")]),t._v(" "),_("ul",[_("li",[t._v("如果是二叉查找树，则会退化为链表")]),t._v(" "),_("li",[t._v("2-3查找树，依然保持严格平衡")])]),t._v(" "),_("p",[t._v("原因就是节点向上插入，自动向叶子节点融合，分裂，来维持绝对平衡。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195334.png",alt:"image-20200815170131934"}})]),t._v(" "),_("h3",{attrs:{id:"_2-3树的性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3树的性质"}},[t._v("#")]),t._v(" 2-3树的性质")]),t._v(" "),_("p",[t._v("一棵完全平衡的2-3树具有以下性质：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("绝对平衡")]),t._v("：任意叶子节点到根结点的路径长度都是相等的")]),t._v(" "),_("li",[_("code",[t._v("4-")]),t._v("结点变换为3-结点时，树的高度不会发生变化；只有当"),_("strong",[t._v("根结点是临时的4-结点")]),t._v("，分解根结点时，树高"),_("code",[t._v("+1")])]),t._v(" "),_("li",[_("code",[t._v("2-3")]),t._v("树与普通二叉查找树最大的区别在于，普通的二叉查找树是自顶向下生长，而2-3树是自底向上生长")])]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_3-红黑树与2-3树的等价"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-红黑树与2-3树的等价"}},[t._v("#")]),t._v(" 3. 红黑树与2-3树的等价")]),t._v(" "),_("p",[t._v("红链接：红边相连的两个节点为一个"),_("code",[t._v("3-")]),t._v("节点，即将两个"),_("code",[t._v("2-")]),t._v("结点连接起来构成一个"),_("code",[t._v("3-")]),t._v("结点；")]),t._v(" "),_("p",[t._v("黑链接：普通节点，则是2-3树中的普通链接")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195338.png",alt:"image-20200815093613790"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195341.png",alt:"image-20200815093626092"}})]),t._v(" "),_("h3",{attrs:{id:"节点等价"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#节点等价"}},[t._v("#")]),t._v(" 节点等价")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195346.png",alt:"image-20200817151531434"}})]),t._v(" "),_("h3",{attrs:{id:"_3-节点转为红节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-节点转为红节点"}},[t._v("#")]),t._v(" 3- 节点转为红节点")]),t._v(" "),_("p",[_("strong",[t._v("【演变过程】")])]),t._v(" "),_("ol",[_("li",[_("font",{attrs:{color:"red"}},[t._v("红色连接边")]),t._v("模拟 "),_("font",{attrs:{color:"red"}},[t._v("3-")]),t._v(" 节点，表示 "),_("font",{attrs:{color:"red"}},[t._v("b-c")]),t._v(" 是一起的节点")],1),t._v(" "),_("li",[t._v("将模拟的 "),_("font",{attrs:{color:"red"}},[t._v("3-")]),t._v(" 节点还原为树形")],1),t._v(" "),_("li",[t._v("由于边是指针存放的节点地址，无法表示红色边为 "),_("font",{attrs:{color:"red"}},[t._v("3-")]),t._v(" 节点的状态，且父节点和孩子节点只有一条边相连，故将孩子节点变为红色")],1),t._v(" "),_("li",[_("font",{attrs:{color:"red"}},[t._v("红节点")]),t._v(" 表示当前节点和其父亲节点是存放在一起的，二者为一体构成 "),_("font",{attrs:{color:"red"}},[t._v("3-")]),t._v(" 节点")],1)]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195356.png",alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195401.png",alt:"image-20200815184322400"}})]),t._v(" "),_("p",[_("strong",[_("font",{attrs:{color:"red"}},[t._v("红节点")])],1),t._v("：当前节点和其"),_("strong",[t._v("父节点")]),t._v("共同构成"),_("code",[t._v("3-")]),t._v("节点")]),t._v(" "),_("p",[_("strong",[t._v("黑节点")]),t._v("：二叉树中普通节点，"),_("code",[t._v("2-3")]),t._v("树中的"),_("code",[t._v("2-")]),t._v("节点")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195406.png",alt:"image-20200815185006663"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195417.png",alt:"image-20200815185225660"}})]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_4-红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-红黑树"}},[t._v("#")]),t._v(" 4. 红黑树")]),t._v(" "),_("h3",{attrs:{id:"_4-1-红黑树的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-红黑树的定义"}},[t._v("#")]),t._v(" 4.1 红黑树的定义")]),t._v(" "),_("p",[t._v("红黑树是含有红黑链接，并满足下列条件的二叉查找树：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("【首先】必须满足是一棵二叉查找树(BST)")])]),t._v(" "),_("li",[_("p",[t._v("【其次】要确保没有一条路径会比其他路径长出两倍")])])]),t._v(" "),_("ol",[_("li",[t._v("每一个结点要么为**"),_("font",{attrs:{color:"red"}},[t._v("红色")]),_("strong",[t._v("，要么为")]),t._v("黑色**；")],1),t._v(" "),_("li",[t._v("根节点为"),_("strong",[t._v("黑色")]),t._v("；")]),t._v(" "),_("li",[_("strong",[_("font",{attrs:{color:"red"}},[t._v("红色节点")]),_("strong",[t._v("不允许")]),t._v("同时")],1),t._v("相连("),_("code",[t._v("4-")]),t._v("节点不允许存在，树中不存在两个相邻的红色结点)；")]),t._v(" "),_("li",[t._v("每个叶子结点都是"),_("strong",[t._v("黑色")]),t._v("的空结点（NIL结点）")]),t._v(" "),_("li",[_("strong",[t._v("黑色平衡")]),t._v("，即任意"),_("strong",[t._v("空连接NIL")]),t._v("到根结点的路径上的"),_("strong",[t._v("黑连接数")]),t._v("相同；")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195431.png",alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195503.png",alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195512.png",alt:""}})]),t._v(" "),_("blockquote",[_("p",[t._v("红黑树要确保没有一条路径会比其他路径长出"),_("strong",[t._v("两倍")]),t._v("，是自平衡的二叉树")])]),t._v(" "),_("h3",{attrs:{id:"_4-2-红黑树的性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-红黑树的性质"}},[t._v("#")]),t._v(" 4.2 红黑树的性质")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("每个节点非红即黑")])]),t._v(" "),_("li",[_("p",[t._v("根节点是黑的;")])]),t._v(" "),_("li",[_("p",[t._v("每个叶节点都是黑的;")])]),t._v(" "),_("li",[_("p",[_("strong",[_("font",{attrs:{color:"red"}},[t._v("红色节点只能出现在左侧")])],1),t._v("（红色节点只能作为黑色节点的==左孩子==，同理黑色节点只能作为黑色节点的右孩子）")])]),t._v(" "),_("li",[_("p",[t._v("如果一个节点是红色的，则它的子节点必须是黑色的（不能同时和两个红链接相连）")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("黑色平衡")]),t._v("，即任意"),_("strong",[t._v("空链接")]),t._v("到根结点的路径上的"),_("strong",[t._v("黑链接数")]),t._v("相同；但不是严格意义上的平衡二叉树")])])]),t._v(" "),_("p",[_("strong",[t._v("【区别】：")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("AVL 树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；")])]),t._v(" "),_("li",[_("p",[t._v("红黑树不是高度平衡的，算是一种折中，"),_("strong",[t._v("插入最多两次旋转")]),t._v("，"),_("strong",[t._v("删除最多三次旋转")]),t._v("。")])]),t._v(" "),_("li")]),t._v(" "),_("h3",{attrs:{id:"_4-3-颜色翻转"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-颜色翻转"}},[t._v("#")]),t._v(" 4.3 颜色翻转")]),t._v(" "),_("blockquote",[_("p",[t._v("颜色翻转为插入、删除操作的一个子过程。将其放入到插入的环境中，结合 "),_("strong",[t._v("2-3树")]),t._v(" 来讲解")])]),t._v(" "),_("p",[t._v("当一个结点的左子结点和右子结点的color都为"),_("font",{attrs:{color:"red"}},[t._v("RED")]),t._v("时，也就是出现了临时的4-结点，此时只需要把左子结点和右子\n结点的颜色变为BLACK，同时让当前结点的颜色变为"),_("font",{attrs:{color:"red"}},[t._v("RED")]),t._v("即可")],1),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195518.png",alt:"image-20200816121511277"}})]),t._v(" "),_("p",[t._v("此时，该结构对应 "),_("strong",[t._v("2-3树")]),t._v(" 的 "),_("strong",[t._v("4-")]),t._v(" 节点，要进行变色；即对应 "),_("strong",[t._v("2-3树")]),t._v(" 的节点分裂，全部变为"),_("strong",[t._v("黑色")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195524.png",alt:"image-20200816122035160"}})]),t._v(" "),_("p",[t._v("然后，节点向上融合，变为**"),_("font",{attrs:{color:"red"}},[t._v("红色")]),t._v("**")],1),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195540.png",alt:"image-20200816122355071"}})]),t._v(" "),_("br"),t._v(" "),_("hr"),t._v(" "),_("br"),t._v(" "),_("h3",{attrs:{id:"_4-4-平衡化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-平衡化"}},[t._v("#")]),t._v(" 4.4 平衡化")]),t._v(" "),_("p",[_("strong",[_("font",{attrs:{color:"red"}},[t._v("平衡化只是保持红黑树的平衡状态，并不满足红黑树的性质")])],1)]),t._v(" "),_("p",[_("strong",[t._v("平衡化完之后，可能还需要颜色翻转")])]),t._v(" "),_("h4",{attrs:{id:"左旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#左旋"}},[t._v("#")]),t._v(" 左旋")]),t._v(" "),_("p",[_("strong",[t._v("1. 左旋：")]),_("font",{attrs:{color:"red"}},[t._v("红节点")]),t._v("出现在了右侧 ；")],1),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195544.png",alt:"image-20200816112813782"}})]),t._v(" "),_("p",[_("strong",[t._v("2. 左旋过程：")])]),t._v(" "),_("ol",[_("li",[t._v("让"),_("code",[t._v("S")]),t._v("的左子结点变为"),_("code",[t._v("E")]),t._v("的右子结点："),_("code",[t._v("S.right = E.left;")])]),t._v(" "),_("li",[t._v("让"),_("code",[t._v("E")]),t._v("成为"),_("code",[t._v("S")]),t._v("的左子结点："),_("code",[t._v("S.left = E;")])]),t._v(" "),_("li",[t._v("让h的color属性变为x的color属性值：x.color=h.color;")]),t._v(" "),_("li",[t._v("让h的color属性变为RED：h.color=true;")])]),t._v(" "),_("p",[_("strong",[t._v("开始左旋")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195549.png",alt:"image-20200816112955729"}})]),t._v(" "),_("p",[_("strong",[t._v("第一步：断开连接")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195553.png",alt:"image-20200816113219087"}})]),t._v(" "),_("p",[_("strong",[t._v("第二步：子树转移")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195557.png",alt:"image-20200816113311291"}})]),t._v(" "),_("p",[_("strong",[t._v("第三步：节点相连")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195601.png",alt:"image-20200816113532289"}})]),t._v(" "),_("p",[_("strong",[t._v("第四步：两次变色")])]),t._v(" "),_("p",[_("code",[t._v("x")]),t._v("变为和"),_("code",[t._v("node")]),t._v("相同的颜色")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195605.png",alt:"image-20200816114326983"}})]),t._v(" "),_("p",[_("code",[t._v("node")]),t._v("变为红色，保证"),_("code",[t._v("node")]),t._v("一定为红色")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195608.png",alt:"image-20200816113935028"}})]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("x节点的颜色一定是与"),_("u",[t._v("开始")]),t._v("时node节点的颜色保持一致")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("如果开始node为红色，则x变色后也是红色")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("node还需要变为红色，node一定为红色")])])])]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("如果开始node为红色，则经历两次变色后，出现两个红色节点相连")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195612.png",alt:"image-20200816114735039"}})]),t._v(" "),_("p",[_("strong",[t._v("此时，将x节点返回，在上一层子树做变色处理，满足红黑树的特性")])]),t._v(" "),_("br"),t._v(" "),_("hr"),t._v(" "),_("br"),t._v(" "),_("h4",{attrs:{id:"右旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#右旋"}},[t._v("#")]),t._v(" 右旋")]),t._v(" "),_("p",[t._v("**右旋：**两个"),_("font",{attrs:{color:"red"}},[t._v("红节点")]),t._v("同时相连(4-节点不允许存在)；")],1),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195617.png",alt:"image-20200816130439883"}})]),t._v(" "),_("p",[_("strong",[t._v("第一步：断开连接")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195620.png",alt:"image-20200816130559656"}})]),t._v(" "),_("p",[_("strong",[t._v("第二步：子树转移")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195626.png",alt:"image-20200816130707751"}})]),t._v(" "),_("p",[_("strong",[t._v("第三步：节点相连")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195629.png",alt:"image-20200816130816002"}})]),t._v(" "),_("p",[_("strong",[t._v("第四步：两次变色")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195634.png",alt:"image-20200816130855213"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195638.png",alt:"image-20200816131020362"}})]),t._v(" "),_("p",[t._v("到此，右旋完成！")]),t._v(" "),_("blockquote",[_("p",[t._v("但是，此时并不符合我们 "),_("strong",[t._v("2-3树")]),t._v(" 的定义，因为此时是一个 "),_("strong",[t._v("4-")]),t._v(" 节点的结构，需要进行颜色翻转")])]),t._v(" "),_("p",[t._v("最终为")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195643.png",alt:"image-20200816131755699"}})]),t._v(" "),_("br"),t._v(" "),_("hr"),t._v(" "),_("br"),t._v(" "),_("h2",{attrs:{id:"_5-红黑树节点添加"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-红黑树节点添加"}},[t._v("#")]),t._v(" 5. 红黑树节点添加")]),t._v(" "),_("p",[_("strong",[_("font",{attrs:{color:"red"}},[t._v("永远添加的是红色节点")])],1)]),t._v(" "),_("h3",{attrs:{id:"添加总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加总结"}},[t._v("#")]),t._v(" 添加总结")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195648.png",alt:"image-20200816135859640"}})]),t._v(" "),_("p",[_("strong",[t._v("1. 找到插入位置并插入")])]),t._v(" "),_("p",[t._v("判断待插入的节点"),_("code",[t._v("c")]),t._v("和当前兄弟节点"),_("code",[t._v("a")]),t._v("和父亲节点"),_("code",[t._v("b")]),t._v("的大小关系：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("c > b > a")]),t._v("：变色即可")]),t._v(" "),_("li",[_("code",[t._v("c < a < b")]),t._v("：右旋 + 变色")]),t._v(" "),_("li",[_("code",[t._v("a < c < b")]),t._v("：左旋 + 右旋 + 变色")])]),t._v(" "),_("p",[_("strong",[t._v("2. 回溯向上维护")])]),t._v(" "),_("p",[t._v("插入完成后，可能当前局部的树是满足红黑树的定义和性质的；但是放到整个树中又有歧义，需要"),_("strong",[t._v("回溯继续进行调整")])]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-节点添加元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-节点添加元素"}},[t._v("#")]),t._v(" 2- 节点添加元素")]),t._v(" "),_("h4",{attrs:{id:"添加在黑节点左侧-直接添加"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加在黑节点左侧-直接添加"}},[t._v("#")]),t._v(" 添加在黑节点左侧——直接添加")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195653.png",alt:"image-20200816112449927"}})]),t._v(" "),_("h4",{attrs:{id:"添加在黑节点右侧-左旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加在黑节点右侧-左旋"}},[t._v("#")]),t._v(" 添加在黑节点右侧——左旋")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195657.png",alt:"image-20200816112813782"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195700.png",alt:"image-20200816113532289"}})]),t._v(" "),_("blockquote",[_("p",[t._v("如上两种操作对应的是"),_("strong",[t._v("2-3查找树")]),t._v("中，向 "),_("strong",[t._v("2-")]),t._v(" 节点添加元素")])]),t._v(" "),_("h3",{attrs:{id:"_3-节点添加元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-节点添加元素"}},[t._v("#")]),t._v(" 3- 节点添加元素")]),t._v(" "),_("h4",{attrs:{id:"添加在黑节点右侧-颜色转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加在黑节点右侧-颜色转换"}},[t._v("#")]),t._v(" 添加在黑节点右侧——颜色转换")]),t._v(" "),_("p",[t._v("此时，形成 "),_("strong",[t._v("4-")]),t._v(" 节点，需要两次变色处理")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195706.png",alt:"image-20200816120525716"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195711.png",alt:"image-20200816121511277"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195717.png",alt:"image-20200816133540556"}})]),t._v(" "),_("h4",{attrs:{id:"添加在红节点左侧-右旋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加在红节点左侧-右旋"}},[t._v("#")]),t._v(" 添加在红节点左侧——右旋")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195720.png",alt:"image-20200816130439883"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195725.png",alt:"image-20200816131020362"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195731.png",alt:"image-20200816131755699"}})]),t._v(" "),_("h4",{attrs:{id:"添加在红节点右侧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#添加在红节点右侧"}},[t._v("#")]),t._v(" 添加在红节点右侧")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195736.png",alt:"image-20200816134432912"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195742.png",alt:"image-20200816134624548"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195747.png",alt:"image-20200816134712296"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195751.png",alt:"image-20200816134747352"}})]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_6-红黑树性能总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-红黑树性能总结"}},[t._v("#")]),t._v(" 6. 红黑树性能总结")]),t._v(" "),_("h3",{attrs:{id:"复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[t._v("#")]),t._v(" 复杂度")]),t._v(" "),_("ul",[_("li",[t._v("最大高度"),_("code",[t._v("2 (lon n)")])]),t._v(" "),_("li",[t._v("添加、删除、查找均为"),_("code",[t._v("O(lon n)")])]),t._v(" "),_("li",[t._v("不会退化为链表，由"),_("code",[t._v("2-3")]),t._v("性质保证")])]),t._v(" "),_("h3",{attrs:{id:"综合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#综合"}},[t._v("#")]),t._v(" 综合")]),t._v(" "),_("p",[t._v("对于完全随机的数据，普通的二分搜索树很好用！")]),t._v(" "),_("ul",[_("li",[t._v("缺点：极端情况退化成链表（或者高度不平衡）")])]),t._v(" "),_("p",[t._v("对于查询较多的使用情况，AVL树很好用！")]),t._v(" "),_("p",[t._v("红黑树牺牲了平衡性（"),_("code",[t._v("2(log n)")]),t._v("的高度）")]),t._v(" "),_("p",[_("strong",[t._v("统计性能更优")]),t._v("（综合增删改查所有的操作）")]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_7-红黑树代码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-红黑树代码实现"}},[t._v("#")]),t._v(" 7. 红黑树代码实现")]),t._v(" "),_("h3",{attrs:{id:"api设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#api设计"}},[t._v("#")]),t._v(" API设计")]),t._v(" "),_("p",[_("strong",[t._v("节点类")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://iqqcode-blog.oss-cn-beijing.aliyuncs.com/img-2021-later/20210626195755.png",alt:"image-20200816075106536"}})]),t._v(" "),_("h3",{attrs:{id:"代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),_("hr"),t._v(" "),_("p",[_("strong",[t._v("【参考文章】")])]),t._v(" "),_("ol",[_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/07526a2f235d",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树到底为什么红黑啊?"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://blog.csdn.net/chen_zhang_yu/article/details/52415077",target:"_blank",rel:"noopener noreferrer"}},[t._v("清晰理解红黑树的演变---红黑的含义"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.lagou.com/lgeduarticle/93400.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么要有红黑树？什么是红黑树？画了20张图，看完这篇你就明白了"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4NDE4MzY2MA==&action=getalbum&album_id=1338152221988585473&subscene=159&subscene=126&scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA4NDE4MzY2MA%3D%3D%26mid%3D2647521575%26idx%3D1%26sn%3D844d6bcdf8cdce683d7d837d4933c788%26chksm%3D87d24624b0a5cf32a119334268184987b6f254de7edfd35ae19c88999789ff70e24a5881bf68%26scene%3D126%26sessionid%3D1597460700%26key%3Daabb5ee173354e5d9c4bc041aab2c756b409e02cab7208a527c2827d4511790aeaa2fdff85e57e707694fbb1dd7131c1dc33ccb49f45cbeacefc81ad338d41f69992e6a07a3da687daf5498c577b78a6111642165c13cdd7bc753fb46abe3038d27580f960bdabdb4cfded7b27b93b32a0532f8ec0d776eb6e64f0ea23ecb82f%26ascene%3D1%26uin%3DMTE1Mjk1NTAwNQ%253D%253D%26devicetype%3DWindows%2B10%2Bx64%26version%3D62090538%26lang%3Dzh_CN%26exportkey%3DA1zRdJZKefQ6v8NAu7skwRw%253D%26pass_ticket%3DE1bDKh3gnVKNt6zWC4ruHy3OLOJo3rmKSyhVKtG5HS80qUl5HKDNr%252BC4uGH61v0R#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树系列文章"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=v.exports}}]);