(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{478:function(t,s,a){"use strict";a.r(s);var _=a(3),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-object类简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-object类简介"}},[t._v("#")]),t._v(" 1. Object类简介")]),t._v(" "),s("p",[t._v("Object类是Java"),s("code",[t._v("java.lang")]),t._v("包下的核心类，"),s("strong",[t._v("Object类是所有类的父类")]),t._v("，何一个类时候如果没有明确的继承一个父类的话，那么它就是Object的子类；")]),t._v(" "),s("p",[t._v("以下两种类的定义的最终效果是完全相同的：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("使用Object类型接收所有类的对象\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518180130301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("Object 类属于"),s("code",[t._v("java.lang")]),t._v("包，此包下的所有类在使用时无需手动导入，系统会在程序编译期间自动导入")])]),t._v(" "),s("p",[s("strong",[t._v("Object 类的结构图（Object提供了11 个方法）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518180524785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n下面我们一个个方法进行分析，看这些方法到底有什么作用：")]),t._v(" "),s("p",[s("strong",[t._v("1. clone()")])]),t._v(" "),s("p",[t._v("保护方法，实现对象的==浅复制==，只有实现了"),s("code",[t._v("Cloneable")]),t._v("接口才可以调用该方法，否则抛出CloneNotSupportedException异常。")]),t._v(" "),s("p",[s("strong",[t._v("2. getClass()")])]),t._v(" "),s("p",[t._v("final方法，返回Class类型的对象，反射来获取对象。")]),t._v(" "),s("p",[s("strong",[t._v("3. toString()")])]),t._v(" "),s("p",[t._v("该方法用得比较多，一般子类都有覆盖，来获取对象的信息。")]),t._v(" "),s("p",[s("strong",[t._v("4. finalize()")])]),t._v(" "),s("p",[t._v("该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。")]),t._v(" "),s("p",[s("strong",[t._v("5. equals()")])]),t._v(" "),s("p",[t._v("比较对象的内容是否相等")]),t._v(" "),s("p",[s("strong",[t._v("6. hashCode()")])]),t._v(" "),s("p",[t._v("该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。")]),t._v(" "),s("p",[s("strong",[t._v("7. wait()")])]),t._v(" "),s("p",[t._v("wait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。")]),t._v(" "),s("p",[t._v("调用该方法后当前线程进入睡眠状态，直到以下事件发生。")]),t._v(" "),s("ol",[s("li",[t._v("其他线程调用了该对象的notify方法。")]),t._v(" "),s("li",[t._v("其他线程调用了该对象的notifyAll方法。")]),t._v(" "),s("li",[t._v("其他线程调用了interrupt中断该线程。")]),t._v(" "),s("li",[t._v("时间间隔到了。")])]),t._v(" "),s("p",[t._v("此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。")]),t._v(" "),s("p",[s("strong",[t._v("8. notify()")])]),t._v(" "),s("p",[t._v("该方法唤醒在该对象上等待的某个线程。")]),t._v(" "),s("p",[s("strong",[t._v("9. notifyAll()")])]),t._v(" "),s("p",[t._v("该方法唤醒在该对象上等待的所有线程。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_2-object类的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-object类的常用方法"}},[t._v("#")]),t._v(" 2. Object类的常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名称")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("toString( )")]),t._v(" "),s("td",[t._v("普通")]),t._v(" "),s("td",[t._v("取得对象信息")])]),t._v(" "),s("tr",[s("td",[t._v("equals()")]),t._v(" "),s("td",[t._v("普通")]),t._v(" "),s("td",[t._v("对象内容比较")])])])]),t._v(" "),s("h3",{attrs:{id:"tostring-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring-方法"}},[t._v("#")]),t._v(" toString( )方法")]),t._v(" "),s("p",[s("strong",[t._v("toString()：取得对象信息，返回该对象的字符串表示")])]),t._v(" "),s("p",[t._v("我们先看一个简单的例子：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518170736558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("输出：iqqcode.algorithm.bintree.Person@1ee12a7")])]),t._v(" "),s("p",[t._v("在使用对象直接输出的时候，默认输出的是一个对象在堆内存上的地址值；如若要输出该对象的内容，则要覆写"),s("code",[t._v("toString()")]),t._v("方法")]),t._v(" "),s("p",[t._v("覆写Person中的"),s("code",[t._v("toString()")]),t._v("方法\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518171146884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("名字为：Mr.Q 年龄为：20")])]),t._v(" "),s("p",[s("strong",[t._v("toString( )的核心目的在于取得对象信息")])]),t._v(" "),s("p",[t._v("String作为信息输出的重要数据类型，在Java中所有的数据类型只要遇见String就执行了"),s("code",[t._v("+")]),t._v("，都要求其变为字符串后连接，而所有对象想要变为字符串就默认用toString( )方法")]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" 输出：hello "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("为什么hello 和 123 (一个是字符串，一个是int类型的数据) 就可以直接拼接在一起呢？")])]),t._v(" "),s("p",[t._v("因为字符串是爸爸，在这个拼爹的时代，他有一个万能的爸爸"),s("code",[t._v("Object")])]),t._v(" "),s("p",[t._v("换而言之，Object是所有类的父类，任意类都是继承Object类的。而Object中定义了 "),s("code",[t._v("toString()")]),t._v("方法，所以任意类中都包含了"),s("code",[t._v("toString()")]),t._v("方法，对象在实例化之后都可以调用。")]),t._v(" "),s("p",[t._v("所以任意对象转字符串的输出，是通过覆写 "),s("code",[t._v("toString()")]),t._v("方法实现的...")]),t._v(" "),s("p",[t._v("每一个类中都包含有toString()，但是并不是每一个类都覆写了toString()\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518172736914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518173107814.png",alt:"在这里插入图片描述"}}),t._v("\n在源码中，可以发现通过反射，获取到了当前对象的全限定类名和@十六进制哈希值字符串。这就是不覆写toString()时直接打印输出的内容。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"equals-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals-方法"}},[t._v("#")]),t._v(" equals( )方法")]),t._v(" "),s("p",[s("strong",[t._v("equals()：对象比较")])]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_43232955/article/details/103216143",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("String类对象比较")]),s("OutboundLink")],1),t._v(" 使用的是 equals()方法，实际上String类的equals()方法就是覆写 Object类中的equals()方法")])]),t._v(" "),s("ul",[s("li",[t._v("基本数据类型的比较用 "),s("code",[t._v("==")]),t._v(" (如： a == 3，b == 4, a == b，比较的是值是否相等）")]),t._v(" "),s("li",[t._v("引用类型数据比较：调用 "),s("code",[t._v("equals()")]),t._v("方法进行比较")])]),t._v(" "),s("p",[t._v("​​用equals( )来比较对象内容是否相同：\n​​"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518174910112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n两个对象per1和per2的内容明明相等，应该是true呀？怎么会是false?")]),t._v(" "),s("p",[t._v("因为此时直接调用equals()方法默认进行比较的是两个对象的地址。")]),t._v(" "),s("p",[t._v("在源码中，传递来的Object对象和当前对象比较地址值，返回布尔值。\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518175035307.png",alt:"在这里插入图片描述"}}),t._v("\n但是，new一下就会在堆上创建新空间，两个对象地址自然不会相同，所以为false。")]),t._v(" "),s("p",[t._v("但是在判断两个对象是否相等时，比如要判断一个Person类的两个对象的姓名是否相同时，此时要重新覆写"),s("code",[t._v("equals()")])]),t._v(" "),s("p",[t._v("还是上面的例子，覆写equals()方法\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200518175546330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("比较结果：true")])]),t._v(" "),s("p",[s("strong",[t._v("所以，引用类型的数据在进行比较时，应该先覆写"),s("code",[t._v("equals()")]),t._v("方法，不然比较的还是两个对象的堆内存地址值，必然不会相等.")])])])}),[],!1,null,null,null);s.default=e.exports}}]);