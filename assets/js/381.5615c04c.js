(window.webpackJsonp=window.webpackJsonp||[]).push([[381],{702:function(t,s,a){"use strict";a.r(s);var n=a(3),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200414212716447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"_1-选择排序思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择排序思想"}},[t._v("#")]),t._v(" 1. 选择排序思想")]),t._v(" "),s("p",[t._v("选择排序，就是通过选择，将元素放到合适的位置上。那么，如何进行选择呢？")]),t._v(" "),s("p",[t._v("举个例子，大家在买东西时，一定会货比三家吧。我们肯定是希望花最少的钱，买最优的货，这种比较选择，就是选择排序的思想。")]),t._v(" "),s("p",[t._v("我现在要在某宝买三顶假发，在购物车添加了五个不同的店家商品（假定我只在一家店只买一件商品）。首先，我会以一家的价钱作为标准，然后和其他四家店的价格比较。比完之后我会选出一件最便宜的付款，然后再剩下的四家中再次选出最便宜的进行比较购买。这就是选择排序的"),s("strong",[t._v("选择")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_2-选择排序详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择排序详解"}},[t._v("#")]),t._v(" 2. 选择排序详解")]),t._v(" "),s("p",[t._v("对序列【4 , 6 , 8 , 7 , 6 , 2 , 9 , 1】递增排序\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020041500084213.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("[ ] 我们让"),s("strong",[t._v("min")]),t._v("作为进行选择探测的指针")])]),t._v(" "),s("li",[s("p",[t._v("对原数据而言，假定第一个索引处的元素是最小值，即当前"),s("code",[t._v("min = 4")]),t._v("；")])]),t._v(" "),s("li",[s("p",[t._v("第一趟排序：min依次和之后索引处的数进行比较，当它到索引5所指向的数"),s("code",[t._v("2")]),t._v("时，发现此索引处的数比自己小，于是让自己指向当前元素，即"),s("code",[t._v("min = 2")]),t._v("；然后"),s("code",[t._v("min")]),t._v("继续向后探测，发现末尾索引处元素"),s("code",[t._v("2")]),t._v("比自己还小，继续更换，"),s("code",[t._v("min = 1")]),t._v("；")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200415000040575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("ul",[s("li",[t._v("此时，遍历完了序列，min发现自己等于"),s("code",[t._v("1")]),t._v("时是最小的。于是和当初假装自己是最小的"),s("code",[t._v("4")]),t._v("进行交换位置")]),t._v(" "),s("li",[t._v("交换完之后，min后移一位，然后又假装此时自己指向的是最小的元素，第二趟选择排序开始")]),t._v(" "),s("li",[t._v("以此类推继续排序。倘若比较完后·"),s("code",[t._v("min")]),t._v("位置的元素是最小值，那就无需交换，不动即可")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200414234639335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("ul",[s("li",[t._v("直到剩余最后一个元素时，min也不用假装自己指向的最小元素了，这次是真的了。只剩一个了，一定是最大的了，就不用管了。到此，选择排序完成！")])]),t._v(" "),s("p",[t._v("【动图详解】\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200414223917402.gif",alt:"在这里插入图片描述"}})]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("选择排序就是通过改变——指向最小元素索引的位置来寻找每趟最小的数，每趟遍历交换指针min指向的值，来比较确定出每趟的最小元素，之后交换元素位置")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_3-代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现"}},[t._v("#")]),t._v(" 3. 代码实现")]),t._v(" "),s("p",[s("strong",[t._v("外层循环完成了数据交换，内层循环完成了数据比较")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参与选择排序的元素：只剩一个元素时不用选择，到倒数第二个元素截止")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//假定本次遍历最小值所在的索引是i，默认第一个")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//让当前最小元素与它后面的元素依次进行比较")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("minIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//交换最小值所在的索引")]),t._v("\n                    minIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将最小元素所在索引minIndex处的值与i索引的值交换")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("minIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("minIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("blockquote",[s("p",[s("font",{attrs:{color:"pink",size:"4"}},[t._v("测试")])],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200415003511572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("归并排序后为：[1, 2, 4, 6, 6, 7, 8, 10]")])]),t._v(" "),s("h3",{attrs:{id:"_4-复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-复杂度分析"}},[t._v("#")]),t._v(" 4. 复杂度分析")]),t._v(" "),s("p",[s("strong",[t._v("【时间复杂度】")])]),t._v(" "),s("p",[t._v("选择排序使用了双层"),s("code",[t._v("for")]),t._v("循环，其中外层循环完成了数据交换，内层循环完成了数据比较，数据\n交换次数和数据比较次数：")]),t._v(" "),s("p",[s("strong",[t._v("数据交换次数：N-1")])]),t._v(" "),s("p",[s("strong",[t._v("数据比较次数：(N-1)+(N-2)+(N-3)+...+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2")])]),t._v(" "),s("p",[t._v("时间复杂度：N^2 / 2 -  N / 2 + (N-1) = N ^ 2/2 + N/2-1;")]),t._v(" "),s("p",[t._v("根据大O推导法则，保留最高阶项，去除常数因子，"),s("strong",[t._v("时间复杂度为O(N^2)")])]),t._v(" "),s("p",[s("strong",[t._v("【空间复杂度】O(1)")])])])}),[],!1,null,null,null);s.default=r.exports}}]);