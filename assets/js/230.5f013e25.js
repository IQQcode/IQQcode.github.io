(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{557:function(t,e,a){"use strict";a.r(e);var _=a(3),v=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"el表达式简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#el表达式简介"}},[t._v("#")]),t._v(" EL表达式简介")]),t._v(" "),e("p",[t._v("EL是JSP 2.0增加的技术规范，其全称是表达式语言(Expression Language)。EL语言的灵感来自于"),e("a",{attrs:{href:"https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=47277627&ss_c=ssc.citiao.link",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript"),e("OutboundLink")],1),t._v(" 和 "),e("a",{attrs:{href:"https://baike.baidu.com/item/XPath/5574064",target:"_blank",rel:"noopener noreferrer"}},[t._v("XPath"),e("OutboundLink")],1),t._v("表达式语言。")]),t._v(" "),e("p",[t._v("EL表达式语言是一种简单的语言，提供了在JSP中简化表达式的方法，目的是为了尽量 "),e("strong",[t._v("减少JSP页面中的Java代码")]),t._v("，使得JSP页面的处理程序编写起来更加简洁，便于开发和维护。")]),t._v(" "),e("h2",{attrs:{id:"el语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#el语法"}},[t._v("#")]),t._v(" EL语法")]),t._v(" "),e("p",[t._v("JSP默认支持EL表达式，在JSP中访问模型对象是通过EL表达式的语法来表达。\n所有EL表达式的格式都是以"),e("code",[t._v("${}")]),t._v("表示。例如，"),e("code",[t._v("${ userinfo}")]),t._v("代表获取变量userinfo的值。当EL表达式的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找。")]),t._v(" "),e("p",[t._v("也可以用范围作为前缀表示属于哪个范围的变量，例如："),e("code",[t._v("${ pageScope. userinfo}")]),t._v("表示访问page范围的userinfo变量。\n作用：替换和简化jsp页面中java代码的编写\n语法："),e("code",[t._v("${表达式}")]),t._v(" "),e("strong",[t._v("忽略页面中所有的EL表达式")]),t._v(" "),e("code",[t._v('<%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="true"%>')]),t._v(" "),e("strong",[t._v("忽略当前EL表达式")])]),t._v(" "),e("ul",[e("li",[t._v("转义字符"),e("code",[t._v("\\${3 > 4}")])])]),t._v(" "),e("h2",{attrs:{id:"el表达式使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#el表达式使用"}},[t._v("#")]),t._v(" EL表达式使用")]),t._v(" "),e("h3",{attrs:{id:"运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算"}},[t._v("#")]),t._v(" 运算")]),t._v(" "),e("p",[e("strong",[t._v("EL运算符")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("操作符")])]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("描述")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(".")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("访问一个Bean属性或者一个映射条目")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("[ ]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("访问一个数组或者链表的元素")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("( )")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("组织一个子表达式以改变优先级")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("加")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("减或负")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("乘")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/ or div")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("% or mod")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取模")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("== or eq")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否相等")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("!= or ne")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否不等")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("< or lt")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否小于")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("> or gt")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否大于")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("<= or le")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否小于等于")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(">= or ge")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试是否大于等于")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&& or and")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试逻辑与")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("|| or or")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试逻辑或")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("! or not")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("测试取反")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("empty")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("空运算符")])])])])]),t._v(" "),e("p",[t._v("empty：用于判断字符串、集合、数组对象是否为null，并且长度是否为0")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("${empty list}")]),t._v("：域中list键对应的值是否为空，长度是否为0")]),t._v(" "),e("li",[e("code",[t._v("${not empty str}")]),t._v("：判断字符串、集合、数组对象是否不为null并且长度>0")])]),t._v(" "),e("h4",{attrs:{id:"获取值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取值"}},[t._v("#")]),t._v(" 获取值")]),t._v(" "),e("p",[e("strong",[t._v("EL表达式只能从域对象中获取值")]),t._v("\n语法")]),t._v(" "),e("p",[e("strong",[t._v("1. "),e("code",[t._v("${域名称键名}")]),t._v("：从指定域中获取指定键的值")])]),t._v(" "),e("p",[t._v("域名称")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("pageScope")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("pageContext")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("requestScope")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("request")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("sessionScope")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("session")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("applicationScope")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("application（ServletContext）")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200318110814159.pngx-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFFt_70",alt:"在这里插入图片描述"}}),t._v("\n举例：在 request域中存储了 "),e("code",[t._v("name=Mr.Q")]),t._v(" 获取："),e("code",[t._v("${ requestscope.name}")])]),t._v(" "),e("p",[e("strong",[t._v("2. "),e("code",[t._v("${键名}")]),t._v("表示依次从最小的域中查找是否有该键对应的值，直到找到为止")]),t._v(" "),e("code",[t._v("${name}")]),t._v("依次从上面四个域中寻找名为name的键（域的范围从小到大）")]),t._v(" "),e("p",[e("strong",[t._v("3. 获取对象、List集合、Map集合的值")])]),t._v(" "),e("ol",[e("li",[t._v("对象："),e("code",[t._v("${域名称.键名.属性名}")])])]),t._v(" "),e("ul",[e("li",[t._v("本质上会去调用对的 getter方法")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("List集合："),e("code",[t._v("${域名称.键名[索引]}")])]),t._v(" "),e("li",[t._v("Map集合：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("${域名称.键名.key名称}")])]),t._v(" "),e("li",[e("code",[t._v('${域名称.键名["key名称"]}')])])]),t._v(" "),e("p",[e("strong",[t._v("动态获取虚拟目录")])]),t._v(" "),e("p",[e("code",[t._v("${pageContext.request}")]),t._v(" "),e("code",[t._v("${pageContext.request.contextPath}")]),t._v("\n等价于"),e("code",[t._v('response.sendRedirect(request.getContextPath() + "");')])]),t._v(" "),e("p",[t._v("【参考文章】")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://baike.sogou.com/v71541536.htmfromTitle=EL%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("EL表达式")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://baike.sogou.com/v71541536.htmfromTitle=EL%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSP 表达式语言"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=v.exports}}]);